{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"L\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng Object Oriented Programming Gi\u1edbi thi\u1ec7u L\u1eadp tr\u00ecnh c\u00f3 vai tr\u00f2 quan tr\u1ecdng trong ng\u00e0nh C\u00f4ng ngh\u1ec7 th\u00f4ng tin, b\u1edfi \u0111\u00e2y l\u00e0 ho\u1ea1t \u0111\u1ed9ng th\u1ef1c h\u00e0nh k\u1ebft h\u1ee3p tr\u00ed th\u00f4ng minh c\u1ee7a con ng\u01b0\u1eddi v\u1edbi s\u1ee9c m\u1ea1nh t\u00ednh to\u00e1n c\u1ee7a m\u00e1y t\u00ednh \u0111i\u1ec7n t\u1eed \u0111\u1ec3 t\u1ea1o ra c\u00e1c ch\u01b0\u01a1ng tr\u00ecnh m\u00e1y t\u00ednh. V\u00ec th\u1ebf, n\u1eafm v\u1eefng v\u00e0 v\u1eadn d\u1ee5ng th\u00e0nh th\u1ea1o c\u00e1c nguy\u00ean l\u00fd, ph\u01b0\u01a1ng ph\u00e1p v\u00e0 c\u00f4ng c\u1ee5 l\u1eadp tr\u00ecnh l\u00e0 y\u00eau c\u1ea7u b\u1eaft bu\u1ed9c \u0111\u1ed1i v\u1edbi sinh vi\u00ean c\u1ee7a ng\u00e0nh. L\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng \u0111\u01b0\u1ee3c xem l\u00e0 ph\u01b0\u01a1ng ph\u00e1p l\u1eadp tr\u00ecnh \u01b0u vi\u1ec7t nh\u1ea5t hi\u1ec7n nay. Ph\u01b0\u01a1ng ph\u00e1p n\u00e0y gi\u00fap qu\u00e1 tr\u00ecnh x\u00e2y d\u1ef1ng ph\u1ea7n m\u1ec1m theo c\u00e1ch g\u1ea7n g\u0169i v\u1edbi th\u1ebf gi\u1edbi th\u1ef1c, s\u1ea3n ph\u1ea9m d\u1ec5 b\u1ea3o tr\u00ec v\u00e0 n\u00e2ng c\u1ea5p, m\u00e3 ngu\u1ed3n c\u00f3 kh\u1ea3 n\u0103ng t\u00e1i s\u1eed d\u1ee5ng cao. H\u1ecdc ph\u1ea7n n\u00e0y gi\u1edbi thi\u1ec7u ph\u01b0\u01a1ng ph\u00e1p l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng t\u1eeb m\u1ee9c \u0111\u1ed9 c\u01a1 b\u1ea3n \u0111\u1ebfn n\u00e2ng cao. \u0110\u1ec3 h\u1ecdc t\u1ed1t h\u1ecdc ph\u1ea7n n\u00e0y, ng\u01b0\u1eddi h\u1ecdc c\u1ea7n n\u1eafm v\u1eefng c\u00e1c ki\u1ebfn th\u1ee9c, ph\u01b0\u01a1ng ph\u00e1p, k\u1ef9 n\u0103ng l\u1eadp tr\u00ecnh c\u0103n b\u1ea3n v\u00e0 gi\u1ea3i thu\u1eadt. C\u00f4ng c\u1ee5 l\u1eadp tr\u00ecnh s\u1eed d\u1ee5ng \u0111\u1ec3 minh h\u1ecda trong h\u1ecdc ph\u1ea7n n\u00e0y l\u00e0 .NET v\u00e0 C#. C\u00e1c ch\u1ee7 \u0111\u1ec1 ch\u00ednh: T\u1ed5ng quan v\u1ec1 l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng N\u1ec1n t\u1ea3ng .NET v\u00e0 ng\u00f4n ng\u1eef C# M\u00f4 h\u00ecnh h\u00f3a h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng v\u1edbi UML L\u1edbp v\u00e0 \u0111\u1ed1i t\u01b0\u1ee3ng Th\u1eeba k\u1ebf v\u00e0 \u0111a h\u00ecnh Ph\u00e1t tri\u1ec3n \u1ee9ng d\u1ee5ng GUI v\u1edbi .NET v\u00e0 C# L\u00fd thuy\u1ebft t\u00f3m t\u1eaft Th\u1ef1c h\u00e0nh T\u00e0i li\u1ec7u tham kh\u1ea3o S\u00e1ch, gi\u00e1o tr\u00ecnh L\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng - Tr\u1ea7n \u0110an Th\u01b0, \u0110inh B\u00e1 Ti\u1ebfn, Nguy\u1ec5n T\u1ea5n Tr\u1ea7n Minh Khang - NXB Khoa h\u1ecdc k\u1ef9 thu\u1eadt, 2010 C# Programming Yellow Book - Rob Miles, 2016 Beginning C# Object-Oriented Programming - Dan Clark, 2015 L\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng v\u1edbi C++ - L\u00ea \u0110\u0103ng H\u01b0ng, T\u1ea1 Tu\u1ea5n Anh, Nguy\u1ec5n H\u1eefu \u0110\u1ee9c, Nguy\u1ec5n Thanh Th\u1ee7y - NXB Khoa h\u1ecdc k\u1ef9 thu\u1eadt, 2005 C++ How to Program, 10th edition - Paul Dietel - Pearson, 2017 T\u00e0i nguy\u00ean tr\u1ef1c tuy\u1ebfn Microsoft .NET documentation Microsoft C# documentation Learn to code in Visual Studio - Microsoft Create .NET console applications using Visual Studio Code C# Tutorial - W3Schools","title":"L\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng"},{"location":"#lap-trinh-huong-oi-tuong","text":"Object Oriented Programming","title":"L\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng"},{"location":"#gioi-thieu","text":"L\u1eadp tr\u00ecnh c\u00f3 vai tr\u00f2 quan tr\u1ecdng trong ng\u00e0nh C\u00f4ng ngh\u1ec7 th\u00f4ng tin, b\u1edfi \u0111\u00e2y l\u00e0 ho\u1ea1t \u0111\u1ed9ng th\u1ef1c h\u00e0nh k\u1ebft h\u1ee3p tr\u00ed th\u00f4ng minh c\u1ee7a con ng\u01b0\u1eddi v\u1edbi s\u1ee9c m\u1ea1nh t\u00ednh to\u00e1n c\u1ee7a m\u00e1y t\u00ednh \u0111i\u1ec7n t\u1eed \u0111\u1ec3 t\u1ea1o ra c\u00e1c ch\u01b0\u01a1ng tr\u00ecnh m\u00e1y t\u00ednh. V\u00ec th\u1ebf, n\u1eafm v\u1eefng v\u00e0 v\u1eadn d\u1ee5ng th\u00e0nh th\u1ea1o c\u00e1c nguy\u00ean l\u00fd, ph\u01b0\u01a1ng ph\u00e1p v\u00e0 c\u00f4ng c\u1ee5 l\u1eadp tr\u00ecnh l\u00e0 y\u00eau c\u1ea7u b\u1eaft bu\u1ed9c \u0111\u1ed1i v\u1edbi sinh vi\u00ean c\u1ee7a ng\u00e0nh. L\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng \u0111\u01b0\u1ee3c xem l\u00e0 ph\u01b0\u01a1ng ph\u00e1p l\u1eadp tr\u00ecnh \u01b0u vi\u1ec7t nh\u1ea5t hi\u1ec7n nay. Ph\u01b0\u01a1ng ph\u00e1p n\u00e0y gi\u00fap qu\u00e1 tr\u00ecnh x\u00e2y d\u1ef1ng ph\u1ea7n m\u1ec1m theo c\u00e1ch g\u1ea7n g\u0169i v\u1edbi th\u1ebf gi\u1edbi th\u1ef1c, s\u1ea3n ph\u1ea9m d\u1ec5 b\u1ea3o tr\u00ec v\u00e0 n\u00e2ng c\u1ea5p, m\u00e3 ngu\u1ed3n c\u00f3 kh\u1ea3 n\u0103ng t\u00e1i s\u1eed d\u1ee5ng cao. H\u1ecdc ph\u1ea7n n\u00e0y gi\u1edbi thi\u1ec7u ph\u01b0\u01a1ng ph\u00e1p l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng t\u1eeb m\u1ee9c \u0111\u1ed9 c\u01a1 b\u1ea3n \u0111\u1ebfn n\u00e2ng cao. \u0110\u1ec3 h\u1ecdc t\u1ed1t h\u1ecdc ph\u1ea7n n\u00e0y, ng\u01b0\u1eddi h\u1ecdc c\u1ea7n n\u1eafm v\u1eefng c\u00e1c ki\u1ebfn th\u1ee9c, ph\u01b0\u01a1ng ph\u00e1p, k\u1ef9 n\u0103ng l\u1eadp tr\u00ecnh c\u0103n b\u1ea3n v\u00e0 gi\u1ea3i thu\u1eadt. C\u00f4ng c\u1ee5 l\u1eadp tr\u00ecnh s\u1eed d\u1ee5ng \u0111\u1ec3 minh h\u1ecda trong h\u1ecdc ph\u1ea7n n\u00e0y l\u00e0 .NET v\u00e0 C#. C\u00e1c ch\u1ee7 \u0111\u1ec1 ch\u00ednh: T\u1ed5ng quan v\u1ec1 l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng N\u1ec1n t\u1ea3ng .NET v\u00e0 ng\u00f4n ng\u1eef C# M\u00f4 h\u00ecnh h\u00f3a h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng v\u1edbi UML L\u1edbp v\u00e0 \u0111\u1ed1i t\u01b0\u1ee3ng Th\u1eeba k\u1ebf v\u00e0 \u0111a h\u00ecnh Ph\u00e1t tri\u1ec3n \u1ee9ng d\u1ee5ng GUI v\u1edbi .NET v\u00e0 C# L\u00fd thuy\u1ebft t\u00f3m t\u1eaft Th\u1ef1c h\u00e0nh","title":"Gi\u1edbi thi\u1ec7u"},{"location":"#tai-lieu-tham-khao","text":"","title":"T\u00e0i li\u1ec7u tham kh\u1ea3o"},{"location":"#sach-giao-trinh","text":"L\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng - Tr\u1ea7n \u0110an Th\u01b0, \u0110inh B\u00e1 Ti\u1ebfn, Nguy\u1ec5n T\u1ea5n Tr\u1ea7n Minh Khang - NXB Khoa h\u1ecdc k\u1ef9 thu\u1eadt, 2010 C# Programming Yellow Book - Rob Miles, 2016 Beginning C# Object-Oriented Programming - Dan Clark, 2015 L\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng v\u1edbi C++ - L\u00ea \u0110\u0103ng H\u01b0ng, T\u1ea1 Tu\u1ea5n Anh, Nguy\u1ec5n H\u1eefu \u0110\u1ee9c, Nguy\u1ec5n Thanh Th\u1ee7y - NXB Khoa h\u1ecdc k\u1ef9 thu\u1eadt, 2005 C++ How to Program, 10th edition - Paul Dietel - Pearson, 2017","title":"S\u00e1ch, gi\u00e1o tr\u00ecnh"},{"location":"#tai-nguyen-truc-tuyen","text":"Microsoft .NET documentation Microsoft C# documentation Learn to code in Visual Studio - Microsoft Create .NET console applications using Visual Studio Code C# Tutorial - W3Schools","title":"T\u00e0i nguy\u00ean tr\u1ef1c tuy\u1ebfn"},{"location":"author/about/","text":"About Lecturer Dr. Hung Nguyen , Dept. of Software Engineering, Nha Trang University. Email: hungnd {at} ntu.edu.vn Acknowledgement This document is built with MkDocs and powered by GitHub .","title":"Gi\u1ea3ng vi\u00ean"},{"location":"author/about/#about","text":"","title":"About"},{"location":"author/about/#lecturer","text":"Dr. Hung Nguyen , Dept. of Software Engineering, Nha Trang University. Email: hungnd {at} ntu.edu.vn","title":"Lecturer"},{"location":"author/about/#acknowledgement","text":"This document is built with MkDocs and powered by GitHub .","title":"Acknowledgement"},{"location":"author/acknowledgement/","text":"Acknowledgement This document is built with MkDocs and powered by Github .","title":"Acknowledgement"},{"location":"author/acknowledgement/#acknowledgement","text":"This document is built with MkDocs and powered by Github .","title":"Acknowledgement"},{"location":"dotnet-and-csharp/","text":"Gi\u1edbi thi\u1ec7u v\u1ec1 l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng S\u01a1 l\u01b0\u1ee3c c\u00e1c ph\u01b0\u01a1ng ph\u00e1p l\u1eadp tr\u00ecnh C\u00e1c \u1ee9ng d\u1ee5ng ng\u00e0y c\u00e0ng \u0111a d\u1ea1ng v\u00e0 ph\u1ee9c t\u1ea1p h\u01a1n, do \u0111\u00f3 c\u00e1c ph\u01b0\u01a1ng ph\u00e1p v\u00e0 c\u00f4ng c\u1ee5 l\u1eadp tr\u00ecnh c\u0169ng c\u1ea7n c\u00f3 s\u1ef1 c\u1ea3i ti\u1ebfn \u0111\u1ec3 gi\u1ea3i quy\u1ebft hi\u1ec7u qu\u1ea3. D\u1ef1a theo \"m\u00f4 th\u1ee9c l\u1eadp tr\u00ecnh\" (programming paradigms - ph\u01b0\u01a1ng ph\u00e1p lu\u1eadn hay nguy\u00ean t\u1eafc chung c\u01a1 b\u1ea3n trong l\u1eadp tr\u00ecnh), c\u00e1c ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh \u0111\u01b0\u1ee3c chia th\u00e0nh hai nh\u00f3m ch\u00ednh: L\u1eadp tr\u00ecnh h\u01b0\u1edbng m\u1ec7nh l\u1ec7nh (imperative programming) L\u1eadp tr\u00ecnh khai b\u00e1o (declarative programming) L\u1eadp tr\u00ecnh h\u01b0\u1edbng m\u1ec7nh l\u1ec7nh (Imperative Programming) L\u1eadp tr\u00ecnh khai b\u00e1o (Declarative Programming) Ph\u01b0\u01a1ng ph\u00e1p l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng C\u00e1ch ti\u1ebfp c\u1eadn h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng L\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng L\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng vs L\u1eadp tr\u00ecnh c\u1ea5u tr\u00fac L\u1eadp tr\u00ecnh h\u01b0\u1edbng m\u1ec7nh l\u1ec7nh (Imperative Programming) Nguy\u00ean l\u00fd l\u1eadp tr\u00ecnh m\u1ec7nh l\u1ec7nh l\u00e0 \"how to do\" - ra l\u1ec7nh m\u00e1y t\u00ednh th\u1ef1c hi\u1ec7n t\u1eebng b\u01b0\u1edbc x\u1eed l\u00fd theo m\u1ed9t tr\u00ecnh t\u1ef1 x\u00e1c \u0111\u1ecbnh \u0111\u1ec3 \u0111\u1ea1t k\u1ebft qu\u1ea3 mong mu\u1ed1n, t\u01b0\u01a1ng \u0111\u1ed3ng v\u1edbi c\u00e1ch m\u00e1y t\u00ednh th\u1ef1c hi\u1ec7n \u1edf m\u1ee9c m\u00e3 m\u00e1y (machine code). Ch\u01b0\u01a1ng tr\u00ecnh \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t theo tr\u00ecnh t\u1ef1 c\u1ee7a gi\u1ea3i thu\u1eadt, v\u00ec th\u1ebf ki\u1ec3u l\u1eadp tr\u00ecnh n\u00e0y c\u00f2n g\u1ecdi l\u00e0 l\u1eadp tr\u00ecnh gi\u1ea3i thu\u1eadt (algorithmic programming). C\u00e1c ph\u01b0\u01a1ng ph\u00e1p l\u1eadp tr\u00ecnh tu\u1ea7n t\u1ef1, h\u01b0\u1edbng th\u1ee7 t\u1ee5c/c\u1ea5u tr\u00fac (procedural/structured programming), l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng (object-oriented programming) \u0111\u1ec1u thu\u1ed9c m\u00f4 th\u1ee9c l\u1eadp tr\u00ecnh h\u01b0\u1edbng m\u1ec7nh l\u1ec7nh. L\u1eadp tr\u00ecnh tu\u1ea7n t\u1ef1 Ch\u01b0\u01a1ng tr\u00ecnh l\u00e0 m\u1ed9t d\u00e3y tu\u1ea7n t\u1ef1 c\u00e1c c\u00e2u l\u1ec7nh. V\u00ed d\u1ee5 /* Minh h\u1ecda l\u1eadp tr\u00ecnh tu\u1ea7n t\u1ef1 v\u1edbi C# S\u1eafp x\u1ebfp d\u00e3y s\u1ed1 t\u0103ng d\u1ea7n Input: D\u00e3y s\u1ed1 nguy\u00ean Output: D\u00e3y s\u1ed1 \u0111\u01b0\u1ee3c s\u1eafp x\u1ebfp t\u0103ng d\u1ea7n */ using System; // Kh\u1edfi t\u1ea1o d\u00e3y s\u1ed1 int n=6; int[] numbers = new int[] {3,8,2,1,6,5}; // S\u1eafp x\u1ebfp d\u00e3y t\u0103ng d\u1ea7n int i=0; OUTER_LOOP: int j=i+1; INNER_LOOP: if(numbers[i] > numbers[j]) { int t = numbers[i]; numbers[i] = numbers[j]; numbers[j] = t; } j += 1; if(j < n) goto INNER_LOOP; i += 1; if(i < n-1) goto OUTER_LOOP; // In ra d\u00e3y \u0111\u00e3 s\u1eafp x\u1ebfp Console.WriteLine(\"Day tang dan:\"); i = 0; LOOP: Console.Write(\"{0} \", numbers[i]); i += 1; if(i < n) goto LOOP; L\u1eadp tr\u00ecnh h\u01b0\u1edbng th\u1ee7 t\u1ee5c/c\u1ea5u tr\u00fac (procedural/structured programming) L\u00e0 ph\u01b0\u01a1ng ph\u00e1p l\u1eadp tr\u00ecnh d\u1ef1a tr\u00ean c\u00e1ch ti\u1ebfp c\u1eadn t\u1eeb tr\u00ean xu\u1ed1ng (top-down development), t\u1eeb t\u1ed5ng qu\u00e1t \u0111\u1ebfn chi ti\u1ebft. Theo \u0111\u00f3, ch\u01b0\u01a1ng tr\u00ecnh \u0111\u01b0\u1ee3c chia th\u00e0nh c\u00e1c kh\u1ed1i ch\u1ee9c n\u0103ng, c\u00e1c ch\u1ee9c n\u0103ng n\u00e0y n\u1ebfu c\u1ea7n l\u1ea1i \u0111\u01b0\u1ee3c ph\u00e2n chia ti\u1ebfp th\u00e0nh c\u00e1c kh\u1ed1i ch\u1ee9c n\u0103ng nh\u1ecf h\u01a1n, cho \u0111\u1ebfn khi c\u00e1c ch\u1ee9c n\u0103ng nh\u1ecf nh\u1ea5t \u0111\u1ee7 \u0111\u01a1n gi\u1ea3n \u0111\u1ec3 c\u00e0i \u0111\u1eb7t th\u00e0nh c\u00e1c ch\u01b0\u01a1ng tr\u00ecnh con (th\u1ee7 t\u1ee5c/h\u00e0m). Ch\u01b0\u01a1ng tr\u00ecnh l\u00e0 s\u1ef1 k\u1ebft h\u1ee3p c\u1ee7a c\u00e1c c\u1ea5u tr\u00fac \u0111i\u1ec1u khi\u1ec3n: tu\u1ea7n t\u1ef1 (sequence), ch\u1ecdn l\u1ef1a (selection) v\u00e0 l\u1eb7p (repetition). D\u1eef li\u1ec7u v\u00e0 x\u1eed l\u00fd t\u00e1ch r\u1eddi nhau. V\u00ed d\u1ee5 /* Minh h\u1ecda l\u1eadp tr\u00ecnh c\u1ea5u tr\u00fac v\u1edbi C# Input: D\u00e3y s\u1ed1 nguy\u00ean Output: D\u00e3y s\u1ed1 \u0111\u01b0\u1ee3c s\u1eafp x\u1ebfp t\u0103ng d\u1ea7n */ // Kh\u1edfi t\u1ea1o m\u1ed9t m\u1ea3ng s\u1ed1 nguy\u00ean int n=6; int[] numbers = new int[] {3,8,2,1,6,5}; // G\u1ecdi h\u00e0m s\u1eafp x\u1ebfp t\u0103ng d\u1ea7n SapXepTD(numbers, n); // G\u1ecdi h\u00e0m in m\u1ea3ng InMang(numbers, n); // H\u00e0m s\u1eafp x\u1ebfp m\u1ea3ng t\u0103ng d\u1ea7n static void SapXepTD(int[] a, int n) { for(int i=0; i < n-1; i++) for(int j=i+1; j < n; j++) if(a[i] > a[j]) { int t = a[i]; a[i] = a[j]; a[j] = t; } } // H\u00e0m in m\u1ea3ng static void InMang(int[] a, int n) { for(int i=0; i < n; i++) Console.Write(\"{0} \", a[i]); } L\u1eadp tr\u00ecnh khai b\u00e1o (Declarative Programming) C\u00e1c ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh khai b\u00e1o di\u1ec5n \u0111\u1ea1t c\u00e1c c\u00e2u l\u1ec7nh theo ki\u1ec3u \"what to do\" - y\u00eau c\u1ea7u m\u00e1y t\u00ednh l\u00e0m g\u00ec \u0111\u1ec3 \u0111\u1ea1t \u0111\u01b0\u1ee3c k\u1ebft qu\u1ea3 m\u00e0 kh\u00f4ng c\u1ea7n quan t\u00e2m \u0111\u1ebfn c\u00e1ch th\u1ee9c th\u1ef1c hi\u1ec7n chi ti\u1ebft. C\u00e1c ph\u00e2n h\u1ec7 c\u1ee7a l\u1eadp tr\u00ecnh khai b\u00e1o g\u1ed3m c\u00f3: L\u1eadp tr\u00ecnh logic (nh\u01b0 Prolog), h\u01b0\u1edbng ch\u1ee9c n\u0103ng (nh\u01b0 Haskell, Scala, F#), c\u00e1c ng\u00f4n ng\u1eef chuy\u00ean bi\u1ec7t (domain-specific) nh\u01b0 SQL, HTML. V\u00ed d\u1ee5 /* Minh h\u1ecda l\u1eadp tr\u00ecnh khai b\u00e1o v\u1edbi C# Input: D\u00e3y s\u1ed1 nguy\u00ean Output: D\u00e3y s\u1ed1 \u0111\u01b0\u1ee3c s\u1eafp x\u1ebfp t\u0103ng d\u1ea7n */ using System; using System.Collections.Generic; // T\u1ea1o m\u1ed9t danh s\u00e1ch List<int> numbers = new List<int> { 3, 8, 2, 1, 5, 6 }; // G\u1ecdi ph\u01b0\u01a1ng th\u1ee9c s\u1eafp x\u1ebfp (t\u0103ng d\u1ea7n) // Ng\u01b0\u1eddi l\u1eadp tr\u00ecnh kh\u00f4ng c\u1ea7n c\u00e0i \u0111\u1eb7t h\u00e0m Sort() numbers.Sort(); // Print the sorted list Console.WriteLine(\"Day tang dan:\"); Console.WriteLine(\"{0}\", string.Join(\", \", numbers)); Nhi\u1ec1u ng\u00f4n ng\u1eef h\u1ed7 tr\u1ee3 \u0111a m\u00f4 th\u1ee9c (multi-paradigm), nh\u01b0: C++, Java, JavaScript, C#, PHP, Python. M\u1ed9t s\u1ed1 ng\u00f4n ng\u1eef ch\u1ec9 h\u1ed7 tr\u1ee3 m\u1ed9t m\u00f4 th\u1ee9c l\u1eadp tr\u00ecnh (single-paradigm), nh\u01b0 Smalltalk, Haskell. Ph\u01b0\u01a1ng ph\u00e1p l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng C\u00e1ch ti\u1ebfp c\u1eadn h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng (Object Oriented Approach) C\u00e1ch ti\u1ebfp c\u1eadn h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng k\u1ebft h\u1ee3p d\u1eef li\u1ec7u v\u00e0 x\u1eed l\u00fd c\u00f3 li\u00ean quan v\u1edbi nhau v\u00e0o m\u1ed9t module. Th\u00edch h\u1ee3p cho ph\u00e1t tri\u1ec3n c\u00e1c h\u1ec7 th\u1ed1ng ph\u1ee9c t\u1ea1p v\u00e0 thay \u0111\u1ed5i nhanh ch\u00f3ng do: \u0110\u00e1p \u1ee9ng c\u00e1c thay \u0111\u1ed5i c\u1ee7a h\u1ec7 th\u1ed1ng v\u1edbi chi ph\u00ed th\u1ea5p. Kh\u1ea3 n\u0103ng t\u00e1i s\u1eed d\u1ee5ng cao. T\u00ednh module h\u00f3a cao, gi\u00fap \u0111\u01a1n gi\u1ea3n h\u00f3a vi\u1ec7c ph\u00e1t tri\u1ec3n c\u00e1c h\u1ec7 th\u1ed1ng l\u1edbn t\u1eeb c\u00e1c th\u00e0nh ph\u1ea7n \u0111\u00e3 c\u00f3. C\u00e1c th\u00e0nh ph\u1ea7n c\u1ee7a h\u1ec7 th\u1ed1ng h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng: \u0110\u1ed1i t\u01b0\u1ee3ng (objects). M\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng l\u00e0 m\u1ed9t th\u1ef1c th\u1ec3 \u0111\u01b0\u1ee3c x\u00e1c \u0111\u1ecbnh b\u1edfi c\u00e1c thu\u1ed9c t\u00ednh v\u00e0 h\u00e0nh vi c\u1ee7a n\u00f3. C\u00e1c th\u1ef1c th\u1ec3 h\u1eefu h\u00ecnh (nh\u01b0 sinh vi\u00ean, gi\u1ea3ng vi\u00ean) hay v\u00f4 h\u00ecnh (nh\u01b0 t\u00e0i kho\u1ea3n ng\u00e2n h\u00e0ng) \u0111\u1ec1u c\u00f3 th\u1ec3 m\u00f4 h\u00ecnh h\u00f3a d\u01b0\u1edbi d\u1ea1ng \u0111\u1ed1i t\u01b0\u1ee3ng. Thu\u1ed9c t\u00ednh (attributes): l\u00e0 c\u00e1c tr\u01b0\u1eddng th\u00f4ng tin m\u00f4 t\u1ea3 \u0111\u1ed1i t\u01b0\u1ee3ng. H\u00e0nh vi (behaviour): l\u00e0 c\u00e1ch \u0111\u1ed1i t\u01b0\u1ee3ng \u1ee9ng x\u1eed v\u1edbi m\u00f4i tr\u01b0\u1eddng xung quanh. L\u1edbp (class): l\u00e0 m\u1ed9t nh\u00f3m c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f3 thu\u1ed9c t\u00ednh v\u00e0 h\u00e0nh vi t\u01b0\u01a1ng t\u1ef1 nhau. Ph\u01b0\u01a1ng th\u1ee9c (methods): l\u00e0 h\u00e0nh \u0111\u1ed9ng x\u00e1c \u0111\u1ecbnh h\u00e0nh vi c\u1ee7a m\u1ed9t l\u1edbp \u0111\u1ed1i t\u01b0\u1ee3ng - l\u00e0 nh\u1eefng h\u00e0nh \u0111\u1ed9ng m\u00e0 \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f3 th\u1ec3 l\u00e0m. Th\u00f4ng \u0111i\u1ec7p (message): l\u00e0 m\u1ed9t ph\u01b0\u01a1ng th\u1ee9c t\u00e1c \u0111\u1ed9ng l\u00ean \u0111\u1ed1i t\u01b0\u1ee3ng \u0111\u1ec3 y\u00eau c\u1ea7u th\u1ef1c hi\u1ec7n h\u00e0nh \u0111\u1ed9ng c\u1ee5 th\u1ec3. L\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng (Object Oriented Programming) L\u00e0 ph\u01b0\u01a1ng ph\u00e1p l\u1eadp tr\u00ecnh d\u1ef1a tr\u00ean c\u00e1ch ti\u1ebfp c\u1eadn h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng. Ch\u01b0\u01a1ng tr\u00ecnh l\u00e0 t\u1eadp h\u1ee3p c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng. \u0110\u1ed1i t\u01b0\u1ee3ng th\u1ef1c hi\u1ec7n c\u00e1c y\u00eau c\u1ea7u x\u1eed l\u00fd th\u00f4ng qua c\u01a1 ch\u1ebf truy\u1ec1n th\u00f4ng \u0111i\u1ec7p (message passing). Thu\u1ed9c t\u00ednh: L\u00e0 c\u00e1c th\u00f4ng tin m\u00f4 t\u1ea3 \u0111\u1ed1i t\u01b0\u1ee3ng. V\u1ec1 m\u1eb7t l\u1eadp tr\u00ecnh, vi\u1ec7c khai b\u00e1o c\u00e1c thu\u1ed9c t\u00ednh t\u01b0\u01a1ng t\u1ef1 nh\u01b0 khai b\u00e1o bi\u1ebfn, v\u00ec th\u1ebf ch\u00fang c\u00f2n \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 bi\u1ebfn th\u00e0nh vi\u00ean (member variables). Ph\u01b0\u01a1ng th\u1ee9c: L\u00e0 c\u00e1c h\u00e0nh vi m\u00e0 \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f3 th\u1ec3 th\u1ef1c hi\u1ec7n. Vi\u1ec7c c\u00e0i \u0111\u1eb7t c\u00e1c ph\u01b0\u01a1ng th\u1ee9c t\u01b0\u01a1ng t\u1ef1 nh\u01b0 c\u00e1c h\u00e0m, v\u00ec th\u1ebf ch\u00fang c\u00f2n \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 h\u00e0m th\u00e0nh vi\u00ean (member functions). V\u00ed d\u1ee5 /* Minh h\u1ecda l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng Input: M\u1ea3ng c\u00e1c s\u1ed1 nguy\u00ean Output: M\u1ea3ng s\u1eafp x\u1ebfp t\u0103ng d\u1ea7n */ using System; // Khai b\u00e1o l\u1edbp Array ch\u1ee9a m\u1ea3ng s\u1ed1 nguy\u00ean v\u00e0 c\u00e1c x\u1eed l\u00fd tr\u00ean m\u1ea3ng public class Array{ private int[] numbers; // D\u1eef li\u1ec7u/bi\u1ebfn th\u00e0nh vi\u00ean // Ph\u01b0\u01a1ng th\u1ee9c (h\u00e0m) thi\u1ebft l\u1eadp (constructor) // T\u1ea1o m\u1ed9t d\u00e3y n ph\u1ea7n t\u1eed c\u00f3 gi\u00e1 tr\u1ecb ng\u1eabu nhi\u00ean trong \u0111o\u1ea1n [Min, Max] public Array(int n, int min=0, int max=50) { numbers = new int[n]; Random randNum = new Random(); for(int i=0; i < numbers.Length; i++) numbers[i] = randNum.Next(min, max); } // Ph\u01b0\u01a1ng th\u1ee9c/H\u00e0m th\u00e0nh vi\u00ean public void Print() { Console.WriteLine(\"{0}\", string.Join(\", \", numbers)); } // S\u1eafp x\u1ebfp t\u0103ng d\u1ea7n public void Sort() { for(int i=0; i < numbers.Length - 1; i++) for(int j=i+1; j < numbers.Length; j++) if(numbers[i] > numbers[j]) { int t = numbers[i]; numbers[i] = numbers[j]; numbers[j] = t; } } } // Ch\u01b0\u01a1ng tr\u00ecnh ch\u00ednh class Program { static void Main(string[] args) { // G\u1ecdi ph\u01b0\u01a1ng th\u1ee9c thi\u1ebft l\u1eadp (constructor) // t\u1ea1o m\u1ea3ng ng\u1eabu nhi\u00ean c\u00e1c s\u1ed1 nguy\u00ean trong kho\u1ea3ng [0, 30] Array myNumbers = new Array(6, 0, 30); // In m\u1ea3ng - g\u1ecdi ph\u01b0\u01a1ng th\u1ee9c Print() Console.WriteLine(\"Random numbers:\"); myNumbers.Print(); // S\u1eafp x\u1ebfp t\u0103ng d\u1ea7n - g\u1ecdi ph\u01b0\u01a1ng th\u1ee9c Sort() myNumbers.Sort(); // In m\u1ea3ng sau s\u1eafp x\u1ebfp - g\u1ecdi ph\u01b0\u01a1ng th\u1ee9c Print() Console.WriteLine(\"The numbers in ascending order:\"); myNumbers.Print(); } } So s\u00e1nh l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng v\u00e0 l\u1eadp tr\u00ecnh c\u1ea5u tr\u00fac B\u00e0i to\u00e1n minh h\u1ecda \u0110\u1ec3 so s\u00e1nh c\u00e1c c\u00e1ch ti\u1ebfp c\u1eadn l\u1eadp tr\u00ecnh, ta x\u00e9t b\u00e0i to\u00e1n - \u0111\u00e3 \u0111\u01a1n gi\u1ea3n h\u00f3a - sau \u0111\u00e2y: M\u1ed9t tr\u01b0\u1eddng h\u1ecdc c\u1ea7n x\u00e2y d\u1ef1ng ph\u1ea7n m\u1ec1m qu\u1ea3n l\u00fd \u0111\u00e0o t\u1ea1o. H\u1ec7 th\u1ed1ng n\u00e0y qu\u1ea3n l\u00fd d\u1eef li\u1ec7u c\u1ee7a sinh vi\u00ean (Students), gi\u1ea3ng vi\u00ean (Lecturers), c\u00e1c m\u00f4n h\u1ecdc (Courses), v\u00e0 c\u00e1c k\u1ef3 thi (Exams). Ph\u1ea7n m\u1ec1m c\u1ea7n c\u00f3 c\u00e1c ch\u1ee9c n\u0103ng: th\u00eam sinh vi\u00ean (AddStudent), x\u00f3a sinh vi\u00ean (RemoveStudent), d\u1ef1 thi (TakeExams), xem \u0111i\u1ec3m (ViewGrades). Sau khi ph\u00e2n t\u00edch, m\u00f4 h\u00ecnh h\u1ec7 th\u1ed1ng qu\u1ea3n l\u00fd \u0111\u00e0o t\u1ea1o \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf theo s\u01a1 \u0111\u1ed3 sau: H\u1ec7 th\u1ed1ng qu\u1ea3n l\u00fd g\u1ed3m c\u00f3 d\u1eef li\u1ec7u (data) v\u00e0 c\u00e1c ch\u1ee9c n\u0103ng (functions) thao t\u00e1c tr\u00ean d\u1eef li\u1ec7u. Trong \u0111\u00f3, \u0111\u01b0\u1eddng n\u00e9t \u0111\u1ee9t th\u1ec3 hi\u1ec7n s\u1ef1 ph\u1ee5 thu\u1ed9c c\u1ee7a m\u1ed9t t\u1eadp d\u1eef li\u1ec7u v\u00e0o m\u1ed9t t\u1eadp d\u1eef li\u1ec7u kh\u00e1c; ch\u1eb3ng h\u1ea1n, m\u1ed7i sinh vi\u00ean h\u1ecdc nhi\u1ec1u m\u00f4n h\u1ecdc, m\u1ed7i m\u00f4n h\u1ecdc l\u1ea1i c\u00f3 nhi\u1ec1u sinh vi\u00ean. \u0110\u01b0\u1eddng m\u0169i t\u00ean th\u1ec3 hi\u1ec7n s\u1ef1 t\u00e1c \u0111\u1ed9ng c\u1ee7a c\u00e1c ch\u1ee9c n\u0103ng l\u00ean m\u1ed9t ho\u1eb7c m\u1ed9t s\u1ed1 t\u1eadp d\u1eef li\u1ec7u; v\u00ed d\u1ee5, ch\u1ee9c n\u0103ng th\u00eam sinh vi\u00ean (AddStudent) s\u1ebd thay \u0111\u1ed5i n\u1ed9i dung c\u1ee7a t\u1eadp d\u1eef li\u1ec7u sinh vi\u00ean (Students), c\u00f2n ch\u1ee9c n\u0103ng d\u1ef1 thi (TakeExams) c\u1ea7n truy c\u1eadp d\u1eef li\u1ec7u c\u1ee7a c\u1ea3 sinh vi\u00ean v\u00e0 k\u1ef3 thi (Exams). Theo c\u00e1ch ti\u1ebfp c\u1eadn l\u1eadp tr\u00ecnh h\u01b0\u1edbng th\u1ee7 t\u1ee5c/c\u1ea5u tr\u00fac , m\u1ed7i ch\u1ee9c n\u0103ng \u0111\u01b0\u1ee3c t\u1ed5 ch\u1ee9c th\u00e0nh m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh con (h\u00e0m) t\u01b0\u01a1ng \u1ee9ng. C\u00e1c h\u00e0m th\u1ef1c hi\u1ec7n x\u1eed l\u00fd d\u1eef li\u1ec7u th\u00f4ng qua truy\u1ec1n tham s\u1ed1 v\u00e0 tr\u1ea3 v\u1ec1 k\u1ebft qu\u1ea3 cho l\u1eddi g\u1ecdi h\u00e0m. X\u00e9t v\u00e0i t\u00ecnh hu\u1ed1ng sau: - T\u00ecnh hu\u1ed1ng 1 : Gi\u1ea3 s\u1eed d\u1eef li\u1ec7u \u0111ang l\u01b0u tr\u1eef n\u0103m sinh l\u00e0 s\u1ed1 c\u00f3 2 ch\u1eef s\u1ed1, nay c\u1ea7n chuy\u1ec3n \u0111\u1ed5i th\u00e0nh s\u1ed1 c\u00f3 4 ch\u1eef s\u1ed1 (v\u00ed d\u1ee5: 97 -> 1997). Gi\u1ea3i ph\u00e1p hi\u1ec3n nhi\u00ean l\u00e0 c\u1ea7n thay \u0111\u1ed5i tr\u01b0\u1eddng d\u1eef li\u1ec7u ng\u00e0y sinh c\u1ee7a sinh vi\u00ean v\u00e0 gi\u1ea3ng vi\u00ean th\u00e0nh s\u1ed1 c\u00f3 4 ch\u1eef s\u1ed1. Khi \u0111\u00f3, t\u1ea5t c\u1ea3 c\u00e1c h\u00e0m c\u00f3 t\u00e1c \u0111\u1ed9ng l\u00ean sinh vi\u00ean v\u00e0 gi\u1ea3ng vi\u00ean s\u1ebd kh\u00f4ng ho\u1ea1t \u0111\u1ed9ng \u0111\u01b0\u1ee3c, tr\u1eeb khi ph\u1ea3i ch\u1ec9nh s\u1eeda l\u1ea1i m\u00e3 ngu\u1ed3n. B\u00ean c\u1ea1nh \u0111\u00f3, t\u1eadp d\u1eef li\u1ec7u sinh vi\u00ean c\u00f3 m\u1ed1i quan h\u1ec7 ph\u1ee5 thu\u1ed9c v\u1edbi c\u00e1c t\u1eadp d\u1eef li\u1ec7u kh\u00e1c, v\u00ec th\u1ebf vi\u1ec7c thay \u0111\u1ed5i n\u00e0y c\u00f3 th\u1ec3 g\u00e2y ra l\u1ed7i cho h\u1ec7 th\u1ed1ng. T\u00ecnh hu\u1ed1ng 2 : H\u1ec7 th\u1ed1ng c\u1ea7n qu\u1ea3n l\u00fd th\u00eam m\u1ed9t th\u00e0nh ph\u1ea7n d\u1eef li\u1ec7u m\u1edbi l\u00e0 sinh vi\u00ean h\u1ec7 v\u1eeba l\u00e0m v\u1eeba h\u1ecdc. V\u1edbi ph\u01b0\u01a1ng ph\u00e1p l\u1eadp tr\u00ecnh c\u1ea5u tr\u00fac, c\u1ea7n thi\u1ebft k\u1ebf l\u1ea1i m\u00f4 h\u00ecnh d\u1eef li\u1ec7u \u0111\u1ec3 b\u1ed5 sung t\u1eadp d\u1eef li\u1ec7u sinh vi\u00ean v\u1eeba l\u00e0m v\u1eeba h\u1ecdc, sau \u0111\u00f3 vi\u1ebft c\u00e1c h\u00e0m x\u1eed l\u00fd t\u01b0\u01a1ng \u1ee9ng v\u1edbi m\u1ed7i ch\u1ee9c n\u0103ng c\u1ea7n c\u00f3 v\u1edbi t\u1eadp d\u1eef li\u1ec7u m\u1edbi n\u00e0y. C\u00e1c t\u00ecnh hu\u1ed1ng tr\u00ean cho th\u1ea5y nh\u01b0\u1ee3c \u0111i\u1ec3m c\u1ee7a ph\u01b0\u01a1ng ph\u00e1p l\u1eadp tr\u00ecnh c\u1ea5u tr\u00fac khi gi\u1ea3i quy\u1ebft nh\u1eefng b\u00e0i to\u00e1n ph\u1ee9c t\u1ea1p. Khi \u0111\u00f3, vi\u1ec7c n\u00e2ng c\u1ea5p hay m\u1edf r\u1ed9ng tr\u1edf n\u00ean kh\u00f3 kh\u0103n. \u0110\u1ed3ng th\u1eddi, kh\u1ea3 n\u0103ng t\u00e1i s\u1eed d\u1ee5ng m\u00e3 ngu\u1ed3n v\u00e0 s\u1ef1 che ch\u1eafn d\u1eef li\u1ec7u c\u0169ng h\u1ea1n ch\u1ebf. V\u1edbi c\u00e1ch ti\u1ebfp c\u1eadn h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng , c\u00e1c ch\u1ee9c n\u0103ng th\u00eam sinh vi\u00ean (AddStudent), x\u00f3a sinh vi\u00ean (RemoveStudent) s\u1ebd \u0111\u01b0\u1ee3c \u0111\u00f3ng g\u00f3i c\u00f9ng v\u1edbi d\u1eef li\u1ec7u sinh vi\u00ean (Students) trong m\u1ed9t module. V\u1edbi m\u1ed7i sinh vi\u00ean, l\u1edbp Student s\u1ebd t\u1ea1o ra m\u1ed9t th\u1ef1c th\u1ec3 t\u01b0\u01a1ng \u1ee9ng \u0111\u1ec3 l\u01b0u tr\u1eef, qu\u1ea3n l\u00fd d\u1eef li\u1ec7u v\u00e0 c\u00e1c x\u1eed l\u00fd li\u00ean quan. T\u01b0\u01a1ng t\u1ef1 nh\u01b0 v\u1eady v\u1edbi c\u00e1c ch\u1ee9c n\u0103ng v\u00e0 t\u1eadp d\u1eef li\u1ec7u kh\u00e1c. \u0110\u1ec3 y\u00eau c\u1ea7u m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng th\u1ef1c hi\u1ec7n m\u1ed9t h\u00e0nh \u0111\u1ed9ng n\u00e0o \u0111\u00f3, c\u1ea7n truy\u1ec1n th\u00f4ng \u0111i\u1ec7p cho n\u00f3 (ch\u00ednh l\u00e0 g\u1ecdi h\u00e0m t\u00e1c \u0111\u1ed9ng l\u00ean \u0111\u1ed1i t\u01b0\u1ee3ng). Ch\u1eb3ng h\u1ea1n, khi m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng sinh vi\u00ean g\u1ecdi ch\u1ee9c n\u0103ng \"Add()\", ch\u01b0\u01a1ng tr\u00ecnh s\u1ebd t\u1ea1o m\u1edbi m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng sinh vi\u00ean, sau \u0111\u00f3 ch\u1ee9c n\u0103ng \"AddAttendee()\" s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi t\u1eeb m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng c\u1ee7a l\u1edbp m\u00f4n h\u1ecdc (Course). T\u00e0i li\u1ec7u tham kh\u1ea3o Lectures on High-performance Computing for Economists, University of Pennsylvania, 2020 Programming Languages, Stanford University, 2018 Object Oriented Analysis and Design using the UML, University of Calgary, 2000","title":"N\u1ec1n t\u1ea3ng .NET v\u00e0 ng\u00f4n ng\u1eef C#"},{"location":"dotnet-and-csharp/#gioi-thieu-ve-lap-trinh-huong-oi-tuong","text":"","title":"Gi\u1edbi thi\u1ec7u v\u1ec1 l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng"},{"location":"dotnet-and-csharp/#so-luoc-cac-phuong-phap-lap-trinh","text":"C\u00e1c \u1ee9ng d\u1ee5ng ng\u00e0y c\u00e0ng \u0111a d\u1ea1ng v\u00e0 ph\u1ee9c t\u1ea1p h\u01a1n, do \u0111\u00f3 c\u00e1c ph\u01b0\u01a1ng ph\u00e1p v\u00e0 c\u00f4ng c\u1ee5 l\u1eadp tr\u00ecnh c\u0169ng c\u1ea7n c\u00f3 s\u1ef1 c\u1ea3i ti\u1ebfn \u0111\u1ec3 gi\u1ea3i quy\u1ebft hi\u1ec7u qu\u1ea3. D\u1ef1a theo \"m\u00f4 th\u1ee9c l\u1eadp tr\u00ecnh\" (programming paradigms - ph\u01b0\u01a1ng ph\u00e1p lu\u1eadn hay nguy\u00ean t\u1eafc chung c\u01a1 b\u1ea3n trong l\u1eadp tr\u00ecnh), c\u00e1c ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh \u0111\u01b0\u1ee3c chia th\u00e0nh hai nh\u00f3m ch\u00ednh: L\u1eadp tr\u00ecnh h\u01b0\u1edbng m\u1ec7nh l\u1ec7nh (imperative programming) L\u1eadp tr\u00ecnh khai b\u00e1o (declarative programming)","title":"S\u01a1 l\u01b0\u1ee3c c\u00e1c ph\u01b0\u01a1ng ph\u00e1p l\u1eadp tr\u00ecnh"},{"location":"dotnet-and-csharp/#lap-trinh-huong-menh-lenh-imperative-programming","text":"","title":"L\u1eadp tr\u00ecnh h\u01b0\u1edbng m\u1ec7nh l\u1ec7nh (Imperative Programming)"},{"location":"dotnet-and-csharp/#lap-trinh-khai-bao-declarative-programming","text":"","title":"L\u1eadp tr\u00ecnh khai b\u00e1o (Declarative Programming)"},{"location":"dotnet-and-csharp/#phuong-phap-lap-trinh-huong-oi-tuong","text":"","title":"Ph\u01b0\u01a1ng ph\u00e1p l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng"},{"location":"dotnet-and-csharp/#cach-tiep-can-huong-oi-tuong","text":"","title":"C\u00e1ch ti\u1ebfp c\u1eadn h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng"},{"location":"dotnet-and-csharp/#lap-trinh-huong-oi-tuong","text":"","title":"L\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng"},{"location":"dotnet-and-csharp/#lap-trinh-huong-oi-tuong-vs-lap-trinh-cau-truc","text":"","title":"L\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng vs L\u1eadp tr\u00ecnh c\u1ea5u tr\u00fac"},{"location":"dotnet-and-csharp/#lap-trinh-huong-menh-lenh-imperative-programming_1","text":"Nguy\u00ean l\u00fd l\u1eadp tr\u00ecnh m\u1ec7nh l\u1ec7nh l\u00e0 \"how to do\" - ra l\u1ec7nh m\u00e1y t\u00ednh th\u1ef1c hi\u1ec7n t\u1eebng b\u01b0\u1edbc x\u1eed l\u00fd theo m\u1ed9t tr\u00ecnh t\u1ef1 x\u00e1c \u0111\u1ecbnh \u0111\u1ec3 \u0111\u1ea1t k\u1ebft qu\u1ea3 mong mu\u1ed1n, t\u01b0\u01a1ng \u0111\u1ed3ng v\u1edbi c\u00e1ch m\u00e1y t\u00ednh th\u1ef1c hi\u1ec7n \u1edf m\u1ee9c m\u00e3 m\u00e1y (machine code). Ch\u01b0\u01a1ng tr\u00ecnh \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t theo tr\u00ecnh t\u1ef1 c\u1ee7a gi\u1ea3i thu\u1eadt, v\u00ec th\u1ebf ki\u1ec3u l\u1eadp tr\u00ecnh n\u00e0y c\u00f2n g\u1ecdi l\u00e0 l\u1eadp tr\u00ecnh gi\u1ea3i thu\u1eadt (algorithmic programming). C\u00e1c ph\u01b0\u01a1ng ph\u00e1p l\u1eadp tr\u00ecnh tu\u1ea7n t\u1ef1, h\u01b0\u1edbng th\u1ee7 t\u1ee5c/c\u1ea5u tr\u00fac (procedural/structured programming), l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng (object-oriented programming) \u0111\u1ec1u thu\u1ed9c m\u00f4 th\u1ee9c l\u1eadp tr\u00ecnh h\u01b0\u1edbng m\u1ec7nh l\u1ec7nh.","title":"L\u1eadp tr\u00ecnh h\u01b0\u1edbng m\u1ec7nh l\u1ec7nh (Imperative Programming)"},{"location":"dotnet-and-csharp/#lap-trinh-tuan-tu","text":"Ch\u01b0\u01a1ng tr\u00ecnh l\u00e0 m\u1ed9t d\u00e3y tu\u1ea7n t\u1ef1 c\u00e1c c\u00e2u l\u1ec7nh. V\u00ed d\u1ee5 /* Minh h\u1ecda l\u1eadp tr\u00ecnh tu\u1ea7n t\u1ef1 v\u1edbi C# S\u1eafp x\u1ebfp d\u00e3y s\u1ed1 t\u0103ng d\u1ea7n Input: D\u00e3y s\u1ed1 nguy\u00ean Output: D\u00e3y s\u1ed1 \u0111\u01b0\u1ee3c s\u1eafp x\u1ebfp t\u0103ng d\u1ea7n */ using System; // Kh\u1edfi t\u1ea1o d\u00e3y s\u1ed1 int n=6; int[] numbers = new int[] {3,8,2,1,6,5}; // S\u1eafp x\u1ebfp d\u00e3y t\u0103ng d\u1ea7n int i=0; OUTER_LOOP: int j=i+1; INNER_LOOP: if(numbers[i] > numbers[j]) { int t = numbers[i]; numbers[i] = numbers[j]; numbers[j] = t; } j += 1; if(j < n) goto INNER_LOOP; i += 1; if(i < n-1) goto OUTER_LOOP; // In ra d\u00e3y \u0111\u00e3 s\u1eafp x\u1ebfp Console.WriteLine(\"Day tang dan:\"); i = 0; LOOP: Console.Write(\"{0} \", numbers[i]); i += 1; if(i < n) goto LOOP;","title":"L\u1eadp tr\u00ecnh tu\u1ea7n t\u1ef1"},{"location":"dotnet-and-csharp/#lap-trinh-huong-thu-tuccau-truc-proceduralstructured-programming","text":"L\u00e0 ph\u01b0\u01a1ng ph\u00e1p l\u1eadp tr\u00ecnh d\u1ef1a tr\u00ean c\u00e1ch ti\u1ebfp c\u1eadn t\u1eeb tr\u00ean xu\u1ed1ng (top-down development), t\u1eeb t\u1ed5ng qu\u00e1t \u0111\u1ebfn chi ti\u1ebft. Theo \u0111\u00f3, ch\u01b0\u01a1ng tr\u00ecnh \u0111\u01b0\u1ee3c chia th\u00e0nh c\u00e1c kh\u1ed1i ch\u1ee9c n\u0103ng, c\u00e1c ch\u1ee9c n\u0103ng n\u00e0y n\u1ebfu c\u1ea7n l\u1ea1i \u0111\u01b0\u1ee3c ph\u00e2n chia ti\u1ebfp th\u00e0nh c\u00e1c kh\u1ed1i ch\u1ee9c n\u0103ng nh\u1ecf h\u01a1n, cho \u0111\u1ebfn khi c\u00e1c ch\u1ee9c n\u0103ng nh\u1ecf nh\u1ea5t \u0111\u1ee7 \u0111\u01a1n gi\u1ea3n \u0111\u1ec3 c\u00e0i \u0111\u1eb7t th\u00e0nh c\u00e1c ch\u01b0\u01a1ng tr\u00ecnh con (th\u1ee7 t\u1ee5c/h\u00e0m). Ch\u01b0\u01a1ng tr\u00ecnh l\u00e0 s\u1ef1 k\u1ebft h\u1ee3p c\u1ee7a c\u00e1c c\u1ea5u tr\u00fac \u0111i\u1ec1u khi\u1ec3n: tu\u1ea7n t\u1ef1 (sequence), ch\u1ecdn l\u1ef1a (selection) v\u00e0 l\u1eb7p (repetition). D\u1eef li\u1ec7u v\u00e0 x\u1eed l\u00fd t\u00e1ch r\u1eddi nhau. V\u00ed d\u1ee5 /* Minh h\u1ecda l\u1eadp tr\u00ecnh c\u1ea5u tr\u00fac v\u1edbi C# Input: D\u00e3y s\u1ed1 nguy\u00ean Output: D\u00e3y s\u1ed1 \u0111\u01b0\u1ee3c s\u1eafp x\u1ebfp t\u0103ng d\u1ea7n */ // Kh\u1edfi t\u1ea1o m\u1ed9t m\u1ea3ng s\u1ed1 nguy\u00ean int n=6; int[] numbers = new int[] {3,8,2,1,6,5}; // G\u1ecdi h\u00e0m s\u1eafp x\u1ebfp t\u0103ng d\u1ea7n SapXepTD(numbers, n); // G\u1ecdi h\u00e0m in m\u1ea3ng InMang(numbers, n); // H\u00e0m s\u1eafp x\u1ebfp m\u1ea3ng t\u0103ng d\u1ea7n static void SapXepTD(int[] a, int n) { for(int i=0; i < n-1; i++) for(int j=i+1; j < n; j++) if(a[i] > a[j]) { int t = a[i]; a[i] = a[j]; a[j] = t; } } // H\u00e0m in m\u1ea3ng static void InMang(int[] a, int n) { for(int i=0; i < n; i++) Console.Write(\"{0} \", a[i]); }","title":"L\u1eadp tr\u00ecnh h\u01b0\u1edbng th\u1ee7 t\u1ee5c/c\u1ea5u tr\u00fac (procedural/structured programming)"},{"location":"dotnet-and-csharp/#lap-trinh-khai-bao-declarative-programming_1","text":"C\u00e1c ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh khai b\u00e1o di\u1ec5n \u0111\u1ea1t c\u00e1c c\u00e2u l\u1ec7nh theo ki\u1ec3u \"what to do\" - y\u00eau c\u1ea7u m\u00e1y t\u00ednh l\u00e0m g\u00ec \u0111\u1ec3 \u0111\u1ea1t \u0111\u01b0\u1ee3c k\u1ebft qu\u1ea3 m\u00e0 kh\u00f4ng c\u1ea7n quan t\u00e2m \u0111\u1ebfn c\u00e1ch th\u1ee9c th\u1ef1c hi\u1ec7n chi ti\u1ebft. C\u00e1c ph\u00e2n h\u1ec7 c\u1ee7a l\u1eadp tr\u00ecnh khai b\u00e1o g\u1ed3m c\u00f3: L\u1eadp tr\u00ecnh logic (nh\u01b0 Prolog), h\u01b0\u1edbng ch\u1ee9c n\u0103ng (nh\u01b0 Haskell, Scala, F#), c\u00e1c ng\u00f4n ng\u1eef chuy\u00ean bi\u1ec7t (domain-specific) nh\u01b0 SQL, HTML. V\u00ed d\u1ee5 /* Minh h\u1ecda l\u1eadp tr\u00ecnh khai b\u00e1o v\u1edbi C# Input: D\u00e3y s\u1ed1 nguy\u00ean Output: D\u00e3y s\u1ed1 \u0111\u01b0\u1ee3c s\u1eafp x\u1ebfp t\u0103ng d\u1ea7n */ using System; using System.Collections.Generic; // T\u1ea1o m\u1ed9t danh s\u00e1ch List<int> numbers = new List<int> { 3, 8, 2, 1, 5, 6 }; // G\u1ecdi ph\u01b0\u01a1ng th\u1ee9c s\u1eafp x\u1ebfp (t\u0103ng d\u1ea7n) // Ng\u01b0\u1eddi l\u1eadp tr\u00ecnh kh\u00f4ng c\u1ea7n c\u00e0i \u0111\u1eb7t h\u00e0m Sort() numbers.Sort(); // Print the sorted list Console.WriteLine(\"Day tang dan:\"); Console.WriteLine(\"{0}\", string.Join(\", \", numbers)); Nhi\u1ec1u ng\u00f4n ng\u1eef h\u1ed7 tr\u1ee3 \u0111a m\u00f4 th\u1ee9c (multi-paradigm), nh\u01b0: C++, Java, JavaScript, C#, PHP, Python. M\u1ed9t s\u1ed1 ng\u00f4n ng\u1eef ch\u1ec9 h\u1ed7 tr\u1ee3 m\u1ed9t m\u00f4 th\u1ee9c l\u1eadp tr\u00ecnh (single-paradigm), nh\u01b0 Smalltalk, Haskell.","title":"L\u1eadp tr\u00ecnh khai b\u00e1o (Declarative Programming)"},{"location":"dotnet-and-csharp/#cach-tiep-can-huong-oi-tuong-object-oriented-approach","text":"C\u00e1ch ti\u1ebfp c\u1eadn h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng k\u1ebft h\u1ee3p d\u1eef li\u1ec7u v\u00e0 x\u1eed l\u00fd c\u00f3 li\u00ean quan v\u1edbi nhau v\u00e0o m\u1ed9t module. Th\u00edch h\u1ee3p cho ph\u00e1t tri\u1ec3n c\u00e1c h\u1ec7 th\u1ed1ng ph\u1ee9c t\u1ea1p v\u00e0 thay \u0111\u1ed5i nhanh ch\u00f3ng do: \u0110\u00e1p \u1ee9ng c\u00e1c thay \u0111\u1ed5i c\u1ee7a h\u1ec7 th\u1ed1ng v\u1edbi chi ph\u00ed th\u1ea5p. Kh\u1ea3 n\u0103ng t\u00e1i s\u1eed d\u1ee5ng cao. T\u00ednh module h\u00f3a cao, gi\u00fap \u0111\u01a1n gi\u1ea3n h\u00f3a vi\u1ec7c ph\u00e1t tri\u1ec3n c\u00e1c h\u1ec7 th\u1ed1ng l\u1edbn t\u1eeb c\u00e1c th\u00e0nh ph\u1ea7n \u0111\u00e3 c\u00f3. C\u00e1c th\u00e0nh ph\u1ea7n c\u1ee7a h\u1ec7 th\u1ed1ng h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng: \u0110\u1ed1i t\u01b0\u1ee3ng (objects). M\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng l\u00e0 m\u1ed9t th\u1ef1c th\u1ec3 \u0111\u01b0\u1ee3c x\u00e1c \u0111\u1ecbnh b\u1edfi c\u00e1c thu\u1ed9c t\u00ednh v\u00e0 h\u00e0nh vi c\u1ee7a n\u00f3. C\u00e1c th\u1ef1c th\u1ec3 h\u1eefu h\u00ecnh (nh\u01b0 sinh vi\u00ean, gi\u1ea3ng vi\u00ean) hay v\u00f4 h\u00ecnh (nh\u01b0 t\u00e0i kho\u1ea3n ng\u00e2n h\u00e0ng) \u0111\u1ec1u c\u00f3 th\u1ec3 m\u00f4 h\u00ecnh h\u00f3a d\u01b0\u1edbi d\u1ea1ng \u0111\u1ed1i t\u01b0\u1ee3ng. Thu\u1ed9c t\u00ednh (attributes): l\u00e0 c\u00e1c tr\u01b0\u1eddng th\u00f4ng tin m\u00f4 t\u1ea3 \u0111\u1ed1i t\u01b0\u1ee3ng. H\u00e0nh vi (behaviour): l\u00e0 c\u00e1ch \u0111\u1ed1i t\u01b0\u1ee3ng \u1ee9ng x\u1eed v\u1edbi m\u00f4i tr\u01b0\u1eddng xung quanh. L\u1edbp (class): l\u00e0 m\u1ed9t nh\u00f3m c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f3 thu\u1ed9c t\u00ednh v\u00e0 h\u00e0nh vi t\u01b0\u01a1ng t\u1ef1 nhau. Ph\u01b0\u01a1ng th\u1ee9c (methods): l\u00e0 h\u00e0nh \u0111\u1ed9ng x\u00e1c \u0111\u1ecbnh h\u00e0nh vi c\u1ee7a m\u1ed9t l\u1edbp \u0111\u1ed1i t\u01b0\u1ee3ng - l\u00e0 nh\u1eefng h\u00e0nh \u0111\u1ed9ng m\u00e0 \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f3 th\u1ec3 l\u00e0m. Th\u00f4ng \u0111i\u1ec7p (message): l\u00e0 m\u1ed9t ph\u01b0\u01a1ng th\u1ee9c t\u00e1c \u0111\u1ed9ng l\u00ean \u0111\u1ed1i t\u01b0\u1ee3ng \u0111\u1ec3 y\u00eau c\u1ea7u th\u1ef1c hi\u1ec7n h\u00e0nh \u0111\u1ed9ng c\u1ee5 th\u1ec3.","title":"C\u00e1ch ti\u1ebfp c\u1eadn h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng (Object Oriented Approach)"},{"location":"dotnet-and-csharp/#lap-trinh-huong-oi-tuong-object-oriented-programming","text":"L\u00e0 ph\u01b0\u01a1ng ph\u00e1p l\u1eadp tr\u00ecnh d\u1ef1a tr\u00ean c\u00e1ch ti\u1ebfp c\u1eadn h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng. Ch\u01b0\u01a1ng tr\u00ecnh l\u00e0 t\u1eadp h\u1ee3p c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng. \u0110\u1ed1i t\u01b0\u1ee3ng th\u1ef1c hi\u1ec7n c\u00e1c y\u00eau c\u1ea7u x\u1eed l\u00fd th\u00f4ng qua c\u01a1 ch\u1ebf truy\u1ec1n th\u00f4ng \u0111i\u1ec7p (message passing). Thu\u1ed9c t\u00ednh: L\u00e0 c\u00e1c th\u00f4ng tin m\u00f4 t\u1ea3 \u0111\u1ed1i t\u01b0\u1ee3ng. V\u1ec1 m\u1eb7t l\u1eadp tr\u00ecnh, vi\u1ec7c khai b\u00e1o c\u00e1c thu\u1ed9c t\u00ednh t\u01b0\u01a1ng t\u1ef1 nh\u01b0 khai b\u00e1o bi\u1ebfn, v\u00ec th\u1ebf ch\u00fang c\u00f2n \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 bi\u1ebfn th\u00e0nh vi\u00ean (member variables). Ph\u01b0\u01a1ng th\u1ee9c: L\u00e0 c\u00e1c h\u00e0nh vi m\u00e0 \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f3 th\u1ec3 th\u1ef1c hi\u1ec7n. Vi\u1ec7c c\u00e0i \u0111\u1eb7t c\u00e1c ph\u01b0\u01a1ng th\u1ee9c t\u01b0\u01a1ng t\u1ef1 nh\u01b0 c\u00e1c h\u00e0m, v\u00ec th\u1ebf ch\u00fang c\u00f2n \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 h\u00e0m th\u00e0nh vi\u00ean (member functions). V\u00ed d\u1ee5 /* Minh h\u1ecda l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng Input: M\u1ea3ng c\u00e1c s\u1ed1 nguy\u00ean Output: M\u1ea3ng s\u1eafp x\u1ebfp t\u0103ng d\u1ea7n */ using System; // Khai b\u00e1o l\u1edbp Array ch\u1ee9a m\u1ea3ng s\u1ed1 nguy\u00ean v\u00e0 c\u00e1c x\u1eed l\u00fd tr\u00ean m\u1ea3ng public class Array{ private int[] numbers; // D\u1eef li\u1ec7u/bi\u1ebfn th\u00e0nh vi\u00ean // Ph\u01b0\u01a1ng th\u1ee9c (h\u00e0m) thi\u1ebft l\u1eadp (constructor) // T\u1ea1o m\u1ed9t d\u00e3y n ph\u1ea7n t\u1eed c\u00f3 gi\u00e1 tr\u1ecb ng\u1eabu nhi\u00ean trong \u0111o\u1ea1n [Min, Max] public Array(int n, int min=0, int max=50) { numbers = new int[n]; Random randNum = new Random(); for(int i=0; i < numbers.Length; i++) numbers[i] = randNum.Next(min, max); } // Ph\u01b0\u01a1ng th\u1ee9c/H\u00e0m th\u00e0nh vi\u00ean public void Print() { Console.WriteLine(\"{0}\", string.Join(\", \", numbers)); } // S\u1eafp x\u1ebfp t\u0103ng d\u1ea7n public void Sort() { for(int i=0; i < numbers.Length - 1; i++) for(int j=i+1; j < numbers.Length; j++) if(numbers[i] > numbers[j]) { int t = numbers[i]; numbers[i] = numbers[j]; numbers[j] = t; } } } // Ch\u01b0\u01a1ng tr\u00ecnh ch\u00ednh class Program { static void Main(string[] args) { // G\u1ecdi ph\u01b0\u01a1ng th\u1ee9c thi\u1ebft l\u1eadp (constructor) // t\u1ea1o m\u1ea3ng ng\u1eabu nhi\u00ean c\u00e1c s\u1ed1 nguy\u00ean trong kho\u1ea3ng [0, 30] Array myNumbers = new Array(6, 0, 30); // In m\u1ea3ng - g\u1ecdi ph\u01b0\u01a1ng th\u1ee9c Print() Console.WriteLine(\"Random numbers:\"); myNumbers.Print(); // S\u1eafp x\u1ebfp t\u0103ng d\u1ea7n - g\u1ecdi ph\u01b0\u01a1ng th\u1ee9c Sort() myNumbers.Sort(); // In m\u1ea3ng sau s\u1eafp x\u1ebfp - g\u1ecdi ph\u01b0\u01a1ng th\u1ee9c Print() Console.WriteLine(\"The numbers in ascending order:\"); myNumbers.Print(); } }","title":"L\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng (Object Oriented Programming)"},{"location":"dotnet-and-csharp/#so-sanh-lap-trinh-huong-oi-tuong-va-lap-trinh-cau-truc","text":"","title":"So s\u00e1nh l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng v\u00e0 l\u1eadp tr\u00ecnh c\u1ea5u tr\u00fac"},{"location":"dotnet-and-csharp/#bai-toan-minh-hoa","text":"\u0110\u1ec3 so s\u00e1nh c\u00e1c c\u00e1ch ti\u1ebfp c\u1eadn l\u1eadp tr\u00ecnh, ta x\u00e9t b\u00e0i to\u00e1n - \u0111\u00e3 \u0111\u01a1n gi\u1ea3n h\u00f3a - sau \u0111\u00e2y: M\u1ed9t tr\u01b0\u1eddng h\u1ecdc c\u1ea7n x\u00e2y d\u1ef1ng ph\u1ea7n m\u1ec1m qu\u1ea3n l\u00fd \u0111\u00e0o t\u1ea1o. H\u1ec7 th\u1ed1ng n\u00e0y qu\u1ea3n l\u00fd d\u1eef li\u1ec7u c\u1ee7a sinh vi\u00ean (Students), gi\u1ea3ng vi\u00ean (Lecturers), c\u00e1c m\u00f4n h\u1ecdc (Courses), v\u00e0 c\u00e1c k\u1ef3 thi (Exams). Ph\u1ea7n m\u1ec1m c\u1ea7n c\u00f3 c\u00e1c ch\u1ee9c n\u0103ng: th\u00eam sinh vi\u00ean (AddStudent), x\u00f3a sinh vi\u00ean (RemoveStudent), d\u1ef1 thi (TakeExams), xem \u0111i\u1ec3m (ViewGrades). Sau khi ph\u00e2n t\u00edch, m\u00f4 h\u00ecnh h\u1ec7 th\u1ed1ng qu\u1ea3n l\u00fd \u0111\u00e0o t\u1ea1o \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf theo s\u01a1 \u0111\u1ed3 sau: H\u1ec7 th\u1ed1ng qu\u1ea3n l\u00fd g\u1ed3m c\u00f3 d\u1eef li\u1ec7u (data) v\u00e0 c\u00e1c ch\u1ee9c n\u0103ng (functions) thao t\u00e1c tr\u00ean d\u1eef li\u1ec7u. Trong \u0111\u00f3, \u0111\u01b0\u1eddng n\u00e9t \u0111\u1ee9t th\u1ec3 hi\u1ec7n s\u1ef1 ph\u1ee5 thu\u1ed9c c\u1ee7a m\u1ed9t t\u1eadp d\u1eef li\u1ec7u v\u00e0o m\u1ed9t t\u1eadp d\u1eef li\u1ec7u kh\u00e1c; ch\u1eb3ng h\u1ea1n, m\u1ed7i sinh vi\u00ean h\u1ecdc nhi\u1ec1u m\u00f4n h\u1ecdc, m\u1ed7i m\u00f4n h\u1ecdc l\u1ea1i c\u00f3 nhi\u1ec1u sinh vi\u00ean. \u0110\u01b0\u1eddng m\u0169i t\u00ean th\u1ec3 hi\u1ec7n s\u1ef1 t\u00e1c \u0111\u1ed9ng c\u1ee7a c\u00e1c ch\u1ee9c n\u0103ng l\u00ean m\u1ed9t ho\u1eb7c m\u1ed9t s\u1ed1 t\u1eadp d\u1eef li\u1ec7u; v\u00ed d\u1ee5, ch\u1ee9c n\u0103ng th\u00eam sinh vi\u00ean (AddStudent) s\u1ebd thay \u0111\u1ed5i n\u1ed9i dung c\u1ee7a t\u1eadp d\u1eef li\u1ec7u sinh vi\u00ean (Students), c\u00f2n ch\u1ee9c n\u0103ng d\u1ef1 thi (TakeExams) c\u1ea7n truy c\u1eadp d\u1eef li\u1ec7u c\u1ee7a c\u1ea3 sinh vi\u00ean v\u00e0 k\u1ef3 thi (Exams). Theo c\u00e1ch ti\u1ebfp c\u1eadn l\u1eadp tr\u00ecnh h\u01b0\u1edbng th\u1ee7 t\u1ee5c/c\u1ea5u tr\u00fac , m\u1ed7i ch\u1ee9c n\u0103ng \u0111\u01b0\u1ee3c t\u1ed5 ch\u1ee9c th\u00e0nh m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh con (h\u00e0m) t\u01b0\u01a1ng \u1ee9ng. C\u00e1c h\u00e0m th\u1ef1c hi\u1ec7n x\u1eed l\u00fd d\u1eef li\u1ec7u th\u00f4ng qua truy\u1ec1n tham s\u1ed1 v\u00e0 tr\u1ea3 v\u1ec1 k\u1ebft qu\u1ea3 cho l\u1eddi g\u1ecdi h\u00e0m. X\u00e9t v\u00e0i t\u00ecnh hu\u1ed1ng sau: - T\u00ecnh hu\u1ed1ng 1 : Gi\u1ea3 s\u1eed d\u1eef li\u1ec7u \u0111ang l\u01b0u tr\u1eef n\u0103m sinh l\u00e0 s\u1ed1 c\u00f3 2 ch\u1eef s\u1ed1, nay c\u1ea7n chuy\u1ec3n \u0111\u1ed5i th\u00e0nh s\u1ed1 c\u00f3 4 ch\u1eef s\u1ed1 (v\u00ed d\u1ee5: 97 -> 1997). Gi\u1ea3i ph\u00e1p hi\u1ec3n nhi\u00ean l\u00e0 c\u1ea7n thay \u0111\u1ed5i tr\u01b0\u1eddng d\u1eef li\u1ec7u ng\u00e0y sinh c\u1ee7a sinh vi\u00ean v\u00e0 gi\u1ea3ng vi\u00ean th\u00e0nh s\u1ed1 c\u00f3 4 ch\u1eef s\u1ed1. Khi \u0111\u00f3, t\u1ea5t c\u1ea3 c\u00e1c h\u00e0m c\u00f3 t\u00e1c \u0111\u1ed9ng l\u00ean sinh vi\u00ean v\u00e0 gi\u1ea3ng vi\u00ean s\u1ebd kh\u00f4ng ho\u1ea1t \u0111\u1ed9ng \u0111\u01b0\u1ee3c, tr\u1eeb khi ph\u1ea3i ch\u1ec9nh s\u1eeda l\u1ea1i m\u00e3 ngu\u1ed3n. B\u00ean c\u1ea1nh \u0111\u00f3, t\u1eadp d\u1eef li\u1ec7u sinh vi\u00ean c\u00f3 m\u1ed1i quan h\u1ec7 ph\u1ee5 thu\u1ed9c v\u1edbi c\u00e1c t\u1eadp d\u1eef li\u1ec7u kh\u00e1c, v\u00ec th\u1ebf vi\u1ec7c thay \u0111\u1ed5i n\u00e0y c\u00f3 th\u1ec3 g\u00e2y ra l\u1ed7i cho h\u1ec7 th\u1ed1ng. T\u00ecnh hu\u1ed1ng 2 : H\u1ec7 th\u1ed1ng c\u1ea7n qu\u1ea3n l\u00fd th\u00eam m\u1ed9t th\u00e0nh ph\u1ea7n d\u1eef li\u1ec7u m\u1edbi l\u00e0 sinh vi\u00ean h\u1ec7 v\u1eeba l\u00e0m v\u1eeba h\u1ecdc. V\u1edbi ph\u01b0\u01a1ng ph\u00e1p l\u1eadp tr\u00ecnh c\u1ea5u tr\u00fac, c\u1ea7n thi\u1ebft k\u1ebf l\u1ea1i m\u00f4 h\u00ecnh d\u1eef li\u1ec7u \u0111\u1ec3 b\u1ed5 sung t\u1eadp d\u1eef li\u1ec7u sinh vi\u00ean v\u1eeba l\u00e0m v\u1eeba h\u1ecdc, sau \u0111\u00f3 vi\u1ebft c\u00e1c h\u00e0m x\u1eed l\u00fd t\u01b0\u01a1ng \u1ee9ng v\u1edbi m\u1ed7i ch\u1ee9c n\u0103ng c\u1ea7n c\u00f3 v\u1edbi t\u1eadp d\u1eef li\u1ec7u m\u1edbi n\u00e0y. C\u00e1c t\u00ecnh hu\u1ed1ng tr\u00ean cho th\u1ea5y nh\u01b0\u1ee3c \u0111i\u1ec3m c\u1ee7a ph\u01b0\u01a1ng ph\u00e1p l\u1eadp tr\u00ecnh c\u1ea5u tr\u00fac khi gi\u1ea3i quy\u1ebft nh\u1eefng b\u00e0i to\u00e1n ph\u1ee9c t\u1ea1p. Khi \u0111\u00f3, vi\u1ec7c n\u00e2ng c\u1ea5p hay m\u1edf r\u1ed9ng tr\u1edf n\u00ean kh\u00f3 kh\u0103n. \u0110\u1ed3ng th\u1eddi, kh\u1ea3 n\u0103ng t\u00e1i s\u1eed d\u1ee5ng m\u00e3 ngu\u1ed3n v\u00e0 s\u1ef1 che ch\u1eafn d\u1eef li\u1ec7u c\u0169ng h\u1ea1n ch\u1ebf. V\u1edbi c\u00e1ch ti\u1ebfp c\u1eadn h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng , c\u00e1c ch\u1ee9c n\u0103ng th\u00eam sinh vi\u00ean (AddStudent), x\u00f3a sinh vi\u00ean (RemoveStudent) s\u1ebd \u0111\u01b0\u1ee3c \u0111\u00f3ng g\u00f3i c\u00f9ng v\u1edbi d\u1eef li\u1ec7u sinh vi\u00ean (Students) trong m\u1ed9t module. V\u1edbi m\u1ed7i sinh vi\u00ean, l\u1edbp Student s\u1ebd t\u1ea1o ra m\u1ed9t th\u1ef1c th\u1ec3 t\u01b0\u01a1ng \u1ee9ng \u0111\u1ec3 l\u01b0u tr\u1eef, qu\u1ea3n l\u00fd d\u1eef li\u1ec7u v\u00e0 c\u00e1c x\u1eed l\u00fd li\u00ean quan. T\u01b0\u01a1ng t\u1ef1 nh\u01b0 v\u1eady v\u1edbi c\u00e1c ch\u1ee9c n\u0103ng v\u00e0 t\u1eadp d\u1eef li\u1ec7u kh\u00e1c. \u0110\u1ec3 y\u00eau c\u1ea7u m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng th\u1ef1c hi\u1ec7n m\u1ed9t h\u00e0nh \u0111\u1ed9ng n\u00e0o \u0111\u00f3, c\u1ea7n truy\u1ec1n th\u00f4ng \u0111i\u1ec7p cho n\u00f3 (ch\u00ednh l\u00e0 g\u1ecdi h\u00e0m t\u00e1c \u0111\u1ed9ng l\u00ean \u0111\u1ed1i t\u01b0\u1ee3ng). Ch\u1eb3ng h\u1ea1n, khi m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng sinh vi\u00ean g\u1ecdi ch\u1ee9c n\u0103ng \"Add()\", ch\u01b0\u01a1ng tr\u00ecnh s\u1ebd t\u1ea1o m\u1edbi m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng sinh vi\u00ean, sau \u0111\u00f3 ch\u1ee9c n\u0103ng \"AddAttendee()\" s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi t\u1eeb m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng c\u1ee7a l\u1edbp m\u00f4n h\u1ecdc (Course).","title":"B\u00e0i to\u00e1n minh h\u1ecda"},{"location":"dotnet-and-csharp/#tai-lieu-tham-khao","text":"","title":"T\u00e0i li\u1ec7u tham kh\u1ea3o"},{"location":"dotnet-and-csharp/#lectures-on-high-performance-computing-for-economists-university-of-pennsylvania-2020","text":"","title":"Lectures on High-performance Computing for Economists, University of Pennsylvania, 2020"},{"location":"dotnet-and-csharp/#programming-languages-stanford-university-2018","text":"","title":"Programming Languages, Stanford University, 2018"},{"location":"dotnet-and-csharp/#object-oriented-analysis-and-design-using-the-uml-university-of-calgary-2000","text":"","title":"Object Oriented Analysis and Design using the UML, University of Calgary, 2000"},{"location":"overview/","text":"T\u1ed5ng quan v\u1ec1 l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng S\u01a1 l\u01b0\u1ee3c c\u00e1c ph\u01b0\u01a1ng ph\u00e1p l\u1eadp tr\u00ecnh C\u00e1c \u1ee9ng d\u1ee5ng ng\u00e0y c\u00e0ng \u0111a d\u1ea1ng v\u00e0 ph\u1ee9c t\u1ea1p h\u01a1n, do \u0111\u00f3 c\u00e1c ph\u01b0\u01a1ng ph\u00e1p v\u00e0 c\u00f4ng c\u1ee5 l\u1eadp tr\u00ecnh c\u0169ng c\u1ea7n c\u00f3 s\u1ef1 c\u1ea3i ti\u1ebfn \u0111\u1ec3 gi\u1ea3i quy\u1ebft hi\u1ec7u qu\u1ea3. D\u1ef1a theo \"m\u00f4 th\u1ee9c l\u1eadp tr\u00ecnh\" (programming paradigms - ph\u01b0\u01a1ng ph\u00e1p lu\u1eadn hay nguy\u00ean t\u1eafc chung c\u01a1 b\u1ea3n trong l\u1eadp tr\u00ecnh), c\u00e1c ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh \u0111\u01b0\u1ee3c chia th\u00e0nh hai nh\u00f3m ch\u00ednh: L\u1eadp tr\u00ecnh h\u01b0\u1edbng m\u1ec7nh l\u1ec7nh (imperative programming) v\u00e0 L\u1eadp tr\u00ecnh khai b\u00e1o (declarative programming). L\u1eadp tr\u00ecnh h\u01b0\u1edbng m\u1ec7nh l\u1ec7nh (Imperative Programming) Nguy\u00ean l\u00fd l\u1eadp tr\u00ecnh m\u1ec7nh l\u1ec7nh l\u00e0 \"how to do\" - ra l\u1ec7nh m\u00e1y t\u00ednh th\u1ef1c hi\u1ec7n t\u1eebng b\u01b0\u1edbc x\u1eed l\u00fd theo m\u1ed9t tr\u00ecnh t\u1ef1 x\u00e1c \u0111\u1ecbnh \u0111\u1ec3 \u0111\u1ea1t k\u1ebft qu\u1ea3 mong mu\u1ed1n, t\u01b0\u01a1ng \u0111\u1ed3ng v\u1edbi c\u00e1ch m\u00e1y t\u00ednh th\u1ef1c hi\u1ec7n \u1edf m\u1ee9c m\u00e3 m\u00e1y (machine code). Ch\u01b0\u01a1ng tr\u00ecnh \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t theo tr\u00ecnh t\u1ef1 c\u1ee7a gi\u1ea3i thu\u1eadt, v\u00ec th\u1ebf ki\u1ec3u l\u1eadp tr\u00ecnh n\u00e0y c\u00f2n g\u1ecdi l\u00e0 l\u1eadp tr\u00ecnh gi\u1ea3i thu\u1eadt (algorithmic programming). C\u00e1c ph\u01b0\u01a1ng ph\u00e1p l\u1eadp tr\u00ecnh tu\u1ea7n t\u1ef1, h\u01b0\u1edbng th\u1ee7 t\u1ee5c/c\u1ea5u tr\u00fac (procedural/structured programming), l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng (object-oriented programming) \u0111\u1ec1u thu\u1ed9c m\u00f4 th\u1ee9c l\u1eadp tr\u00ecnh h\u01b0\u1edbng m\u1ec7nh l\u1ec7nh. L\u1eadp tr\u00ecnh khai b\u00e1o (Declarative Programming) C\u00e1c ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh khai b\u00e1o di\u1ec5n \u0111\u1ea1t c\u00e1c c\u00e2u l\u1ec7nh theo ki\u1ec3u \"what to do\" - y\u00eau c\u1ea7u m\u00e1y t\u00ednh l\u00e0m g\u00ec \u0111\u1ec3 \u0111\u1ea1t \u0111\u01b0\u1ee3c k\u1ebft qu\u1ea3 m\u00e0 kh\u00f4ng c\u1ea7n quan t\u00e2m \u0111\u1ebfn c\u00e1ch th\u1ee9c th\u1ef1c hi\u1ec7n chi ti\u1ebft. C\u00e1c ph\u00e2n h\u1ec7 c\u1ee7a l\u1eadp tr\u00ecnh khai b\u00e1o g\u1ed3m c\u00f3: L\u1eadp tr\u00ecnh logic (nh\u01b0 Prolog), h\u01b0\u1edbng ch\u1ee9c n\u0103ng (nh\u01b0 Haskell, Scala, F#), c\u00e1c ng\u00f4n ng\u1eef chuy\u00ean bi\u1ec7t (domain-specific) nh\u01b0 SQL, HTML. Ph\u01b0\u01a1ng ph\u00e1p l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng C\u00e1ch ti\u1ebfp c\u1eadn h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng L\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng L\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng vs L\u1eadp tr\u00ecnh c\u1ea5u tr\u00fac L\u1eadp tr\u00ecnh tu\u1ea7n t\u1ef1 Ch\u01b0\u01a1ng tr\u00ecnh l\u00e0 m\u1ed9t d\u00e3y tu\u1ea7n t\u1ef1 c\u00e1c c\u00e2u l\u1ec7nh. L\u1eadp tr\u00ecnh h\u01b0\u1edbng th\u1ee7 t\u1ee5c/c\u1ea5u tr\u00fac (procedural/structured programming) L\u00e0 ph\u01b0\u01a1ng ph\u00e1p l\u1eadp tr\u00ecnh d\u1ef1a tr\u00ean c\u00e1ch ti\u1ebfp c\u1eadn t\u1eeb tr\u00ean xu\u1ed1ng (top-down development), t\u1eeb t\u1ed5ng qu\u00e1t \u0111\u1ebfn chi ti\u1ebft. Theo \u0111\u00f3, ch\u01b0\u01a1ng tr\u00ecnh \u0111\u01b0\u1ee3c chia th\u00e0nh c\u00e1c kh\u1ed1i ch\u1ee9c n\u0103ng, c\u00e1c ch\u1ee9c n\u0103ng n\u00e0y n\u1ebfu c\u1ea7n l\u1ea1i \u0111\u01b0\u1ee3c ph\u00e2n chia ti\u1ebfp th\u00e0nh c\u00e1c kh\u1ed1i ch\u1ee9c n\u0103ng nh\u1ecf h\u01a1n, cho \u0111\u1ebfn khi c\u00e1c ch\u1ee9c n\u0103ng nh\u1ecf nh\u1ea5t \u0111\u1ee7 \u0111\u01a1n gi\u1ea3n \u0111\u1ec3 c\u00e0i \u0111\u1eb7t th\u00e0nh c\u00e1c ch\u01b0\u01a1ng tr\u00ecnh con (th\u1ee7 t\u1ee5c/h\u00e0m). Ch\u01b0\u01a1ng tr\u00ecnh l\u00e0 s\u1ef1 k\u1ebft h\u1ee3p c\u1ee7a c\u00e1c c\u1ea5u tr\u00fac \u0111i\u1ec1u khi\u1ec3n: tu\u1ea7n t\u1ef1 (sequence), ch\u1ecdn l\u1ef1a (selection) v\u00e0 l\u1eb7p (repetition). D\u1eef li\u1ec7u v\u00e0 x\u1eed l\u00fd t\u00e1ch r\u1eddi nhau. V\u00ed d\u1ee5 /* Minh h\u1ecda l\u1eadp tr\u00ecnh c\u1ea5u tr\u00fac v\u1edbi C# Input: D\u00e3y s\u1ed1 nguy\u00ean Output: D\u00e3y s\u1ed1 \u0111\u01b0\u1ee3c s\u1eafp x\u1ebfp t\u0103ng d\u1ea7n */ // Kh\u1edfi t\u1ea1o m\u1ed9t m\u1ea3ng s\u1ed1 nguy\u00ean int n=6; int[] numbers = new int[] {3,8,2,1,6,5}; // G\u1ecdi h\u00e0m s\u1eafp x\u1ebfp t\u0103ng d\u1ea7n SapXepTD(numbers, n); // G\u1ecdi h\u00e0m in m\u1ea3ng InMang(numbers, n); // H\u00e0m s\u1eafp x\u1ebfp m\u1ea3ng t\u0103ng d\u1ea7n static void SapXepTD(int[] a, int n) { for(int i=0; i < n-1; i++) for(int j=i+1; j < n; j++) if(a[i] > a[j]) { int t = a[i]; a[i] = a[j]; a[j] = t; } } // H\u00e0m in m\u1ea3ng static void InMang(int[] a, int n) { for(int i=0; i < n; i++) Console.Write(\"{0} \", a[i]); } V\u00ed d\u1ee5 /* Minh h\u1ecda l\u1eadp tr\u00ecnh khai b\u00e1o v\u1edbi C# Input: D\u00e3y s\u1ed1 nguy\u00ean Output: D\u00e3y s\u1ed1 \u0111\u01b0\u1ee3c s\u1eafp x\u1ebfp t\u0103ng d\u1ea7n */ using System; using System.Collections.Generic; // T\u1ea1o m\u1ed9t danh s\u00e1ch List<int> numbers = new List<int> { 3, 8, 2, 1, 5, 6 }; // G\u1ecdi ph\u01b0\u01a1ng th\u1ee9c s\u1eafp x\u1ebfp (t\u0103ng d\u1ea7n) // Ng\u01b0\u1eddi l\u1eadp tr\u00ecnh kh\u00f4ng c\u1ea7n c\u00e0i \u0111\u1eb7t h\u00e0m Sort() numbers.Sort(); // Print the sorted list Console.WriteLine(\"Day tang dan:\"); Console.WriteLine(\"{0}\", string.Join(\", \", numbers)); Nhi\u1ec1u ng\u00f4n ng\u1eef h\u1ed7 tr\u1ee3 \u0111a m\u00f4 th\u1ee9c (multi-paradigm), nh\u01b0: C++, Java, JavaScript, C#, PHP, Python. M\u1ed9t s\u1ed1 ng\u00f4n ng\u1eef ch\u1ec9 h\u1ed7 tr\u1ee3 m\u1ed9t m\u00f4 th\u1ee9c l\u1eadp tr\u00ecnh (single-paradigm), nh\u01b0 Smalltalk, Haskell. Ph\u01b0\u01a1ng ph\u00e1p l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng C\u00e1ch ti\u1ebfp c\u1eadn h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng (Object Oriented Approach) C\u00e1ch ti\u1ebfp c\u1eadn h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng k\u1ebft h\u1ee3p d\u1eef li\u1ec7u v\u00e0 x\u1eed l\u00fd c\u00f3 li\u00ean quan v\u1edbi nhau v\u00e0o m\u1ed9t module. Th\u00edch h\u1ee3p cho ph\u00e1t tri\u1ec3n c\u00e1c h\u1ec7 th\u1ed1ng ph\u1ee9c t\u1ea1p v\u00e0 thay \u0111\u1ed5i nhanh ch\u00f3ng do: \u0110\u00e1p \u1ee9ng c\u00e1c thay \u0111\u1ed5i c\u1ee7a h\u1ec7 th\u1ed1ng v\u1edbi chi ph\u00ed th\u1ea5p. Kh\u1ea3 n\u0103ng t\u00e1i s\u1eed d\u1ee5ng cao. T\u00ednh module h\u00f3a cao, gi\u00fap \u0111\u01a1n gi\u1ea3n h\u00f3a vi\u1ec7c ph\u00e1t tri\u1ec3n c\u00e1c h\u1ec7 th\u1ed1ng l\u1edbn t\u1eeb c\u00e1c th\u00e0nh ph\u1ea7n \u0111\u00e3 c\u00f3. C\u00e1c th\u00e0nh ph\u1ea7n c\u1ee7a h\u1ec7 th\u1ed1ng h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng: \u0110\u1ed1i t\u01b0\u1ee3ng (objects). M\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng l\u00e0 m\u1ed9t th\u1ef1c th\u1ec3 \u0111\u01b0\u1ee3c x\u00e1c \u0111\u1ecbnh b\u1edfi c\u00e1c thu\u1ed9c t\u00ednh v\u00e0 h\u00e0nh vi c\u1ee7a n\u00f3. C\u00e1c th\u1ef1c th\u1ec3 h\u1eefu h\u00ecnh (nh\u01b0 sinh vi\u00ean, gi\u1ea3ng vi\u00ean) hay v\u00f4 h\u00ecnh (nh\u01b0 t\u00e0i kho\u1ea3n ng\u00e2n h\u00e0ng) \u0111\u1ec1u c\u00f3 th\u1ec3 m\u00f4 h\u00ecnh h\u00f3a d\u01b0\u1edbi d\u1ea1ng \u0111\u1ed1i t\u01b0\u1ee3ng. Thu\u1ed9c t\u00ednh (attributes): l\u00e0 c\u00e1c tr\u01b0\u1eddng th\u00f4ng tin m\u00f4 t\u1ea3 \u0111\u1ed1i t\u01b0\u1ee3ng. H\u00e0nh vi (behaviour): l\u00e0 c\u00e1ch \u0111\u1ed1i t\u01b0\u1ee3ng \u1ee9ng x\u1eed v\u1edbi m\u00f4i tr\u01b0\u1eddng xung quanh. L\u1edbp (class): l\u00e0 m\u1ed9t nh\u00f3m c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f3 thu\u1ed9c t\u00ednh v\u00e0 h\u00e0nh vi t\u01b0\u01a1ng t\u1ef1 nhau. Ph\u01b0\u01a1ng th\u1ee9c (methods): l\u00e0 h\u00e0nh \u0111\u1ed9ng x\u00e1c \u0111\u1ecbnh h\u00e0nh vi c\u1ee7a m\u1ed9t l\u1edbp \u0111\u1ed1i t\u01b0\u1ee3ng - l\u00e0 nh\u1eefng h\u00e0nh \u0111\u1ed9ng m\u00e0 \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f3 th\u1ec3 l\u00e0m. Th\u00f4ng \u0111i\u1ec7p (message): l\u00e0 m\u1ed9t ph\u01b0\u01a1ng th\u1ee9c t\u00e1c \u0111\u1ed9ng l\u00ean \u0111\u1ed1i t\u01b0\u1ee3ng \u0111\u1ec3 y\u00eau c\u1ea7u th\u1ef1c hi\u1ec7n h\u00e0nh \u0111\u1ed9ng c\u1ee5 th\u1ec3. L\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng (Object Oriented Programming) L\u00e0 ph\u01b0\u01a1ng ph\u00e1p l\u1eadp tr\u00ecnh d\u1ef1a tr\u00ean c\u00e1ch ti\u1ebfp c\u1eadn h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng. Ch\u01b0\u01a1ng tr\u00ecnh l\u00e0 t\u1eadp h\u1ee3p c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng. \u0110\u1ed1i t\u01b0\u1ee3ng th\u1ef1c hi\u1ec7n c\u00e1c y\u00eau c\u1ea7u x\u1eed l\u00fd th\u00f4ng qua c\u01a1 ch\u1ebf truy\u1ec1n th\u00f4ng \u0111i\u1ec7p (message passing). Thu\u1ed9c t\u00ednh: L\u00e0 c\u00e1c th\u00f4ng tin m\u00f4 t\u1ea3 \u0111\u1ed1i t\u01b0\u1ee3ng. V\u1ec1 m\u1eb7t l\u1eadp tr\u00ecnh, vi\u1ec7c khai b\u00e1o c\u00e1c thu\u1ed9c t\u00ednh t\u01b0\u01a1ng t\u1ef1 nh\u01b0 khai b\u00e1o bi\u1ebfn, v\u00ec th\u1ebf ch\u00fang c\u00f2n \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 bi\u1ebfn th\u00e0nh vi\u00ean (member variables). Ph\u01b0\u01a1ng th\u1ee9c: L\u00e0 c\u00e1c h\u00e0nh vi m\u00e0 \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f3 th\u1ec3 th\u1ef1c hi\u1ec7n. Vi\u1ec7c c\u00e0i \u0111\u1eb7t c\u00e1c ph\u01b0\u01a1ng th\u1ee9c t\u01b0\u01a1ng t\u1ef1 nh\u01b0 c\u00e1c h\u00e0m, v\u00ec th\u1ebf ch\u00fang c\u00f2n \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 h\u00e0m th\u00e0nh vi\u00ean (member functions). V\u00ed d\u1ee5 /* Minh h\u1ecda l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng Input: M\u1ea3ng c\u00e1c s\u1ed1 nguy\u00ean Output: M\u1ea3ng s\u1eafp x\u1ebfp t\u0103ng d\u1ea7n */ using System; // Khai b\u00e1o l\u1edbp Array ch\u1ee9a m\u1ea3ng s\u1ed1 nguy\u00ean v\u00e0 c\u00e1c x\u1eed l\u00fd tr\u00ean m\u1ea3ng public class Array{ private int[] numbers; // D\u1eef li\u1ec7u/bi\u1ebfn th\u00e0nh vi\u00ean // Ph\u01b0\u01a1ng th\u1ee9c (h\u00e0m) thi\u1ebft l\u1eadp (constructor) // T\u1ea1o m\u1ed9t d\u00e3y n ph\u1ea7n t\u1eed c\u00f3 gi\u00e1 tr\u1ecb ng\u1eabu nhi\u00ean trong \u0111o\u1ea1n [Min, Max] public Array(int n, int min=0, int max=50) { numbers = new int[n]; Random randNum = new Random(); for(int i=0; i < numbers.Length; i++) numbers[i] = randNum.Next(min, max); } // Ph\u01b0\u01a1ng th\u1ee9c/H\u00e0m th\u00e0nh vi\u00ean public void Print() { Console.WriteLine(\"{0}\", string.Join(\", \", numbers)); } // S\u1eafp x\u1ebfp t\u0103ng d\u1ea7n public void Sort() { for(int i=0; i < numbers.Length - 1; i++) for(int j=i+1; j < numbers.Length; j++) if(numbers[i] > numbers[j]) { int t = numbers[i]; numbers[i] = numbers[j]; numbers[j] = t; } } } // Ch\u01b0\u01a1ng tr\u00ecnh ch\u00ednh class Program { static void Main(string[] args) { // G\u1ecdi ph\u01b0\u01a1ng th\u1ee9c thi\u1ebft l\u1eadp (constructor) // t\u1ea1o m\u1ea3ng ng\u1eabu nhi\u00ean c\u00e1c s\u1ed1 nguy\u00ean trong kho\u1ea3ng [0, 30] Array myNumbers = new Array(6, 0, 30); // In m\u1ea3ng - g\u1ecdi ph\u01b0\u01a1ng th\u1ee9c Print() Console.WriteLine(\"Random numbers:\"); myNumbers.Print(); // S\u1eafp x\u1ebfp t\u0103ng d\u1ea7n - g\u1ecdi ph\u01b0\u01a1ng th\u1ee9c Sort() myNumbers.Sort(); // In m\u1ea3ng sau s\u1eafp x\u1ebfp - g\u1ecdi ph\u01b0\u01a1ng th\u1ee9c Print() Console.WriteLine(\"The numbers in ascending order:\"); myNumbers.Print(); } } So s\u00e1nh l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng v\u00e0 l\u1eadp tr\u00ecnh c\u1ea5u tr\u00fac B\u00e0i to\u00e1n minh h\u1ecda \u0110\u1ec3 so s\u00e1nh c\u00e1c c\u00e1ch ti\u1ebfp c\u1eadn l\u1eadp tr\u00ecnh, ta x\u00e9t b\u00e0i to\u00e1n - \u0111\u00e3 \u0111\u01a1n gi\u1ea3n h\u00f3a - sau \u0111\u00e2y: M\u1ed9t tr\u01b0\u1eddng h\u1ecdc c\u1ea7n x\u00e2y d\u1ef1ng ph\u1ea7n m\u1ec1m qu\u1ea3n l\u00fd \u0111\u00e0o t\u1ea1o. H\u1ec7 th\u1ed1ng n\u00e0y qu\u1ea3n l\u00fd d\u1eef li\u1ec7u c\u1ee7a sinh vi\u00ean (Students), gi\u1ea3ng vi\u00ean (Lecturers), c\u00e1c m\u00f4n h\u1ecdc (Courses), v\u00e0 c\u00e1c k\u1ef3 thi (Exams). Ph\u1ea7n m\u1ec1m c\u1ea7n c\u00f3 c\u00e1c ch\u1ee9c n\u0103ng: th\u00eam sinh vi\u00ean (AddStudent), x\u00f3a sinh vi\u00ean (RemoveStudent), d\u1ef1 thi (TakeExams), xem \u0111i\u1ec3m (ViewGrades). Sau khi ph\u00e2n t\u00edch, m\u00f4 h\u00ecnh h\u1ec7 th\u1ed1ng qu\u1ea3n l\u00fd \u0111\u00e0o t\u1ea1o \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf theo s\u01a1 \u0111\u1ed3 sau: H\u1ec7 th\u1ed1ng qu\u1ea3n l\u00fd g\u1ed3m c\u00f3 d\u1eef li\u1ec7u (data) v\u00e0 c\u00e1c ch\u1ee9c n\u0103ng (functions) thao t\u00e1c tr\u00ean d\u1eef li\u1ec7u. Trong \u0111\u00f3, \u0111\u01b0\u1eddng n\u00e9t \u0111\u1ee9t th\u1ec3 hi\u1ec7n s\u1ef1 ph\u1ee5 thu\u1ed9c c\u1ee7a m\u1ed9t t\u1eadp d\u1eef li\u1ec7u v\u00e0o m\u1ed9t t\u1eadp d\u1eef li\u1ec7u kh\u00e1c; ch\u1eb3ng h\u1ea1n, m\u1ed7i sinh vi\u00ean h\u1ecdc nhi\u1ec1u m\u00f4n h\u1ecdc, m\u1ed7i m\u00f4n h\u1ecdc l\u1ea1i c\u00f3 nhi\u1ec1u sinh vi\u00ean. \u0110\u01b0\u1eddng m\u0169i t\u00ean th\u1ec3 hi\u1ec7n s\u1ef1 t\u00e1c \u0111\u1ed9ng c\u1ee7a c\u00e1c ch\u1ee9c n\u0103ng l\u00ean m\u1ed9t ho\u1eb7c m\u1ed9t s\u1ed1 t\u1eadp d\u1eef li\u1ec7u; v\u00ed d\u1ee5, ch\u1ee9c n\u0103ng th\u00eam sinh vi\u00ean (AddStudent) s\u1ebd thay \u0111\u1ed5i n\u1ed9i dung c\u1ee7a t\u1eadp d\u1eef li\u1ec7u sinh vi\u00ean (Students), c\u00f2n ch\u1ee9c n\u0103ng d\u1ef1 thi (TakeExams) c\u1ea7n truy c\u1eadp d\u1eef li\u1ec7u c\u1ee7a c\u1ea3 sinh vi\u00ean v\u00e0 k\u1ef3 thi (Exams). Theo c\u00e1ch ti\u1ebfp c\u1eadn l\u1eadp tr\u00ecnh h\u01b0\u1edbng th\u1ee7 t\u1ee5c/c\u1ea5u tr\u00fac , m\u1ed7i ch\u1ee9c n\u0103ng \u0111\u01b0\u1ee3c t\u1ed5 ch\u1ee9c th\u00e0nh m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh con (h\u00e0m) t\u01b0\u01a1ng \u1ee9ng. C\u00e1c h\u00e0m th\u1ef1c hi\u1ec7n x\u1eed l\u00fd d\u1eef li\u1ec7u th\u00f4ng qua truy\u1ec1n tham s\u1ed1 v\u00e0 tr\u1ea3 v\u1ec1 k\u1ebft qu\u1ea3 cho l\u1eddi g\u1ecdi h\u00e0m. X\u00e9t v\u00e0i t\u00ecnh hu\u1ed1ng sau: - T\u00ecnh hu\u1ed1ng 1 : Gi\u1ea3 s\u1eed d\u1eef li\u1ec7u \u0111ang l\u01b0u tr\u1eef n\u0103m sinh l\u00e0 s\u1ed1 c\u00f3 2 ch\u1eef s\u1ed1, nay c\u1ea7n chuy\u1ec3n \u0111\u1ed5i th\u00e0nh s\u1ed1 c\u00f3 4 ch\u1eef s\u1ed1 (v\u00ed d\u1ee5: 97 -> 1997). Gi\u1ea3i ph\u00e1p hi\u1ec3n nhi\u00ean l\u00e0 c\u1ea7n thay \u0111\u1ed5i tr\u01b0\u1eddng d\u1eef li\u1ec7u ng\u00e0y sinh c\u1ee7a sinh vi\u00ean v\u00e0 gi\u1ea3ng vi\u00ean th\u00e0nh s\u1ed1 c\u00f3 4 ch\u1eef s\u1ed1. Khi \u0111\u00f3, t\u1ea5t c\u1ea3 c\u00e1c h\u00e0m c\u00f3 t\u00e1c \u0111\u1ed9ng l\u00ean sinh vi\u00ean v\u00e0 gi\u1ea3ng vi\u00ean s\u1ebd kh\u00f4ng ho\u1ea1t \u0111\u1ed9ng \u0111\u01b0\u1ee3c, tr\u1eeb khi ph\u1ea3i ch\u1ec9nh s\u1eeda l\u1ea1i m\u00e3 ngu\u1ed3n. B\u00ean c\u1ea1nh \u0111\u00f3, t\u1eadp d\u1eef li\u1ec7u sinh vi\u00ean c\u00f3 m\u1ed1i quan h\u1ec7 ph\u1ee5 thu\u1ed9c v\u1edbi c\u00e1c t\u1eadp d\u1eef li\u1ec7u kh\u00e1c, v\u00ec th\u1ebf vi\u1ec7c thay \u0111\u1ed5i n\u00e0y c\u00f3 th\u1ec3 g\u00e2y ra l\u1ed7i cho h\u1ec7 th\u1ed1ng. T\u00ecnh hu\u1ed1ng 2 : H\u1ec7 th\u1ed1ng c\u1ea7n qu\u1ea3n l\u00fd th\u00eam m\u1ed9t th\u00e0nh ph\u1ea7n d\u1eef li\u1ec7u m\u1edbi l\u00e0 sinh vi\u00ean h\u1ec7 v\u1eeba l\u00e0m v\u1eeba h\u1ecdc. V\u1edbi ph\u01b0\u01a1ng ph\u00e1p l\u1eadp tr\u00ecnh c\u1ea5u tr\u00fac, c\u1ea7n thi\u1ebft k\u1ebf l\u1ea1i m\u00f4 h\u00ecnh d\u1eef li\u1ec7u \u0111\u1ec3 b\u1ed5 sung t\u1eadp d\u1eef li\u1ec7u sinh vi\u00ean v\u1eeba l\u00e0m v\u1eeba h\u1ecdc, sau \u0111\u00f3 vi\u1ebft c\u00e1c h\u00e0m x\u1eed l\u00fd t\u01b0\u01a1ng \u1ee9ng v\u1edbi m\u1ed7i ch\u1ee9c n\u0103ng c\u1ea7n c\u00f3 v\u1edbi t\u1eadp d\u1eef li\u1ec7u m\u1edbi n\u00e0y. C\u00e1c t\u00ecnh hu\u1ed1ng tr\u00ean cho th\u1ea5y nh\u01b0\u1ee3c \u0111i\u1ec3m c\u1ee7a ph\u01b0\u01a1ng ph\u00e1p l\u1eadp tr\u00ecnh c\u1ea5u tr\u00fac khi gi\u1ea3i quy\u1ebft nh\u1eefng b\u00e0i to\u00e1n ph\u1ee9c t\u1ea1p. Khi \u0111\u00f3, vi\u1ec7c n\u00e2ng c\u1ea5p hay m\u1edf r\u1ed9ng tr\u1edf n\u00ean kh\u00f3 kh\u0103n. \u0110\u1ed3ng th\u1eddi, kh\u1ea3 n\u0103ng t\u00e1i s\u1eed d\u1ee5ng m\u00e3 ngu\u1ed3n v\u00e0 s\u1ef1 che ch\u1eafn d\u1eef li\u1ec7u c\u0169ng h\u1ea1n ch\u1ebf. V\u1edbi c\u00e1ch ti\u1ebfp c\u1eadn h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng , c\u00e1c ch\u1ee9c n\u0103ng th\u00eam sinh vi\u00ean (AddStudent), x\u00f3a sinh vi\u00ean (RemoveStudent) s\u1ebd \u0111\u01b0\u1ee3c \u0111\u00f3ng g\u00f3i c\u00f9ng v\u1edbi d\u1eef li\u1ec7u sinh vi\u00ean (Students) trong m\u1ed9t module. V\u1edbi m\u1ed7i sinh vi\u00ean, l\u1edbp Student s\u1ebd t\u1ea1o ra m\u1ed9t th\u1ef1c th\u1ec3 t\u01b0\u01a1ng \u1ee9ng \u0111\u1ec3 l\u01b0u tr\u1eef, qu\u1ea3n l\u00fd d\u1eef li\u1ec7u v\u00e0 c\u00e1c x\u1eed l\u00fd li\u00ean quan. T\u01b0\u01a1ng t\u1ef1 nh\u01b0 v\u1eady v\u1edbi c\u00e1c ch\u1ee9c n\u0103ng v\u00e0 t\u1eadp d\u1eef li\u1ec7u kh\u00e1c. \u0110\u1ec3 y\u00eau c\u1ea7u m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng th\u1ef1c hi\u1ec7n m\u1ed9t h\u00e0nh \u0111\u1ed9ng n\u00e0o \u0111\u00f3, c\u1ea7n truy\u1ec1n th\u00f4ng \u0111i\u1ec7p cho n\u00f3 (ch\u00ednh l\u00e0 g\u1ecdi h\u00e0m t\u00e1c \u0111\u1ed9ng l\u00ean \u0111\u1ed1i t\u01b0\u1ee3ng). Ch\u1eb3ng h\u1ea1n, khi m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng sinh vi\u00ean g\u1ecdi ch\u1ee9c n\u0103ng \"Add()\", ch\u01b0\u01a1ng tr\u00ecnh s\u1ebd t\u1ea1o m\u1edbi m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng sinh vi\u00ean, sau \u0111\u00f3 ch\u1ee9c n\u0103ng \"AddAttendee()\" s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi t\u1eeb m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng c\u1ee7a l\u1edbp m\u00f4n h\u1ecdc (Course). T\u00e0i li\u1ec7u tham kh\u1ea3o Lectures on High-performance Computing for Economists, University of Pennsylvania, 2020 Programming Languages, Stanford University, 2018 Object Oriented Analysis and Design using the UML, University of Calgary, 2000","title":"T\u1ed5ng quan v\u1ec1 l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng"},{"location":"overview/#tong-quan-ve-lap-trinh-huong-oi-tuong","text":"","title":"T\u1ed5ng quan v\u1ec1 l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng"},{"location":"overview/#so-luoc-cac-phuong-phap-lap-trinh","text":"C\u00e1c \u1ee9ng d\u1ee5ng ng\u00e0y c\u00e0ng \u0111a d\u1ea1ng v\u00e0 ph\u1ee9c t\u1ea1p h\u01a1n, do \u0111\u00f3 c\u00e1c ph\u01b0\u01a1ng ph\u00e1p v\u00e0 c\u00f4ng c\u1ee5 l\u1eadp tr\u00ecnh c\u0169ng c\u1ea7n c\u00f3 s\u1ef1 c\u1ea3i ti\u1ebfn \u0111\u1ec3 gi\u1ea3i quy\u1ebft hi\u1ec7u qu\u1ea3. D\u1ef1a theo \"m\u00f4 th\u1ee9c l\u1eadp tr\u00ecnh\" (programming paradigms - ph\u01b0\u01a1ng ph\u00e1p lu\u1eadn hay nguy\u00ean t\u1eafc chung c\u01a1 b\u1ea3n trong l\u1eadp tr\u00ecnh), c\u00e1c ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh \u0111\u01b0\u1ee3c chia th\u00e0nh hai nh\u00f3m ch\u00ednh: L\u1eadp tr\u00ecnh h\u01b0\u1edbng m\u1ec7nh l\u1ec7nh (imperative programming) v\u00e0 L\u1eadp tr\u00ecnh khai b\u00e1o (declarative programming).","title":"S\u01a1 l\u01b0\u1ee3c c\u00e1c ph\u01b0\u01a1ng ph\u00e1p l\u1eadp tr\u00ecnh"},{"location":"overview/#lap-trinh-huong-menh-lenh-imperative-programming","text":"Nguy\u00ean l\u00fd l\u1eadp tr\u00ecnh m\u1ec7nh l\u1ec7nh l\u00e0 \"how to do\" - ra l\u1ec7nh m\u00e1y t\u00ednh th\u1ef1c hi\u1ec7n t\u1eebng b\u01b0\u1edbc x\u1eed l\u00fd theo m\u1ed9t tr\u00ecnh t\u1ef1 x\u00e1c \u0111\u1ecbnh \u0111\u1ec3 \u0111\u1ea1t k\u1ebft qu\u1ea3 mong mu\u1ed1n, t\u01b0\u01a1ng \u0111\u1ed3ng v\u1edbi c\u00e1ch m\u00e1y t\u00ednh th\u1ef1c hi\u1ec7n \u1edf m\u1ee9c m\u00e3 m\u00e1y (machine code). Ch\u01b0\u01a1ng tr\u00ecnh \u0111\u01b0\u1ee3c c\u00e0i \u0111\u1eb7t theo tr\u00ecnh t\u1ef1 c\u1ee7a gi\u1ea3i thu\u1eadt, v\u00ec th\u1ebf ki\u1ec3u l\u1eadp tr\u00ecnh n\u00e0y c\u00f2n g\u1ecdi l\u00e0 l\u1eadp tr\u00ecnh gi\u1ea3i thu\u1eadt (algorithmic programming). C\u00e1c ph\u01b0\u01a1ng ph\u00e1p l\u1eadp tr\u00ecnh tu\u1ea7n t\u1ef1, h\u01b0\u1edbng th\u1ee7 t\u1ee5c/c\u1ea5u tr\u00fac (procedural/structured programming), l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng (object-oriented programming) \u0111\u1ec1u thu\u1ed9c m\u00f4 th\u1ee9c l\u1eadp tr\u00ecnh h\u01b0\u1edbng m\u1ec7nh l\u1ec7nh.","title":"L\u1eadp tr\u00ecnh h\u01b0\u1edbng m\u1ec7nh l\u1ec7nh (Imperative Programming)"},{"location":"overview/#lap-trinh-khai-bao-declarative-programming","text":"C\u00e1c ng\u00f4n ng\u1eef l\u1eadp tr\u00ecnh khai b\u00e1o di\u1ec5n \u0111\u1ea1t c\u00e1c c\u00e2u l\u1ec7nh theo ki\u1ec3u \"what to do\" - y\u00eau c\u1ea7u m\u00e1y t\u00ednh l\u00e0m g\u00ec \u0111\u1ec3 \u0111\u1ea1t \u0111\u01b0\u1ee3c k\u1ebft qu\u1ea3 m\u00e0 kh\u00f4ng c\u1ea7n quan t\u00e2m \u0111\u1ebfn c\u00e1ch th\u1ee9c th\u1ef1c hi\u1ec7n chi ti\u1ebft. C\u00e1c ph\u00e2n h\u1ec7 c\u1ee7a l\u1eadp tr\u00ecnh khai b\u00e1o g\u1ed3m c\u00f3: L\u1eadp tr\u00ecnh logic (nh\u01b0 Prolog), h\u01b0\u1edbng ch\u1ee9c n\u0103ng (nh\u01b0 Haskell, Scala, F#), c\u00e1c ng\u00f4n ng\u1eef chuy\u00ean bi\u1ec7t (domain-specific) nh\u01b0 SQL, HTML.","title":"L\u1eadp tr\u00ecnh khai b\u00e1o (Declarative Programming)"},{"location":"overview/#phuong-phap-lap-trinh-huong-oi-tuong","text":"","title":"Ph\u01b0\u01a1ng ph\u00e1p l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng"},{"location":"overview/#cach-tiep-can-huong-oi-tuong","text":"","title":"C\u00e1ch ti\u1ebfp c\u1eadn h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng"},{"location":"overview/#lap-trinh-huong-oi-tuong","text":"","title":"L\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng"},{"location":"overview/#lap-trinh-huong-oi-tuong-vs-lap-trinh-cau-truc","text":"","title":"L\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng vs L\u1eadp tr\u00ecnh c\u1ea5u tr\u00fac"},{"location":"overview/#lap-trinh-tuan-tu","text":"Ch\u01b0\u01a1ng tr\u00ecnh l\u00e0 m\u1ed9t d\u00e3y tu\u1ea7n t\u1ef1 c\u00e1c c\u00e2u l\u1ec7nh.","title":"L\u1eadp tr\u00ecnh tu\u1ea7n t\u1ef1"},{"location":"overview/#lap-trinh-huong-thu-tuccau-truc-proceduralstructured-programming","text":"L\u00e0 ph\u01b0\u01a1ng ph\u00e1p l\u1eadp tr\u00ecnh d\u1ef1a tr\u00ean c\u00e1ch ti\u1ebfp c\u1eadn t\u1eeb tr\u00ean xu\u1ed1ng (top-down development), t\u1eeb t\u1ed5ng qu\u00e1t \u0111\u1ebfn chi ti\u1ebft. Theo \u0111\u00f3, ch\u01b0\u01a1ng tr\u00ecnh \u0111\u01b0\u1ee3c chia th\u00e0nh c\u00e1c kh\u1ed1i ch\u1ee9c n\u0103ng, c\u00e1c ch\u1ee9c n\u0103ng n\u00e0y n\u1ebfu c\u1ea7n l\u1ea1i \u0111\u01b0\u1ee3c ph\u00e2n chia ti\u1ebfp th\u00e0nh c\u00e1c kh\u1ed1i ch\u1ee9c n\u0103ng nh\u1ecf h\u01a1n, cho \u0111\u1ebfn khi c\u00e1c ch\u1ee9c n\u0103ng nh\u1ecf nh\u1ea5t \u0111\u1ee7 \u0111\u01a1n gi\u1ea3n \u0111\u1ec3 c\u00e0i \u0111\u1eb7t th\u00e0nh c\u00e1c ch\u01b0\u01a1ng tr\u00ecnh con (th\u1ee7 t\u1ee5c/h\u00e0m). Ch\u01b0\u01a1ng tr\u00ecnh l\u00e0 s\u1ef1 k\u1ebft h\u1ee3p c\u1ee7a c\u00e1c c\u1ea5u tr\u00fac \u0111i\u1ec1u khi\u1ec3n: tu\u1ea7n t\u1ef1 (sequence), ch\u1ecdn l\u1ef1a (selection) v\u00e0 l\u1eb7p (repetition). D\u1eef li\u1ec7u v\u00e0 x\u1eed l\u00fd t\u00e1ch r\u1eddi nhau. V\u00ed d\u1ee5 /* Minh h\u1ecda l\u1eadp tr\u00ecnh c\u1ea5u tr\u00fac v\u1edbi C# Input: D\u00e3y s\u1ed1 nguy\u00ean Output: D\u00e3y s\u1ed1 \u0111\u01b0\u1ee3c s\u1eafp x\u1ebfp t\u0103ng d\u1ea7n */ // Kh\u1edfi t\u1ea1o m\u1ed9t m\u1ea3ng s\u1ed1 nguy\u00ean int n=6; int[] numbers = new int[] {3,8,2,1,6,5}; // G\u1ecdi h\u00e0m s\u1eafp x\u1ebfp t\u0103ng d\u1ea7n SapXepTD(numbers, n); // G\u1ecdi h\u00e0m in m\u1ea3ng InMang(numbers, n); // H\u00e0m s\u1eafp x\u1ebfp m\u1ea3ng t\u0103ng d\u1ea7n static void SapXepTD(int[] a, int n) { for(int i=0; i < n-1; i++) for(int j=i+1; j < n; j++) if(a[i] > a[j]) { int t = a[i]; a[i] = a[j]; a[j] = t; } } // H\u00e0m in m\u1ea3ng static void InMang(int[] a, int n) { for(int i=0; i < n; i++) Console.Write(\"{0} \", a[i]); } V\u00ed d\u1ee5 /* Minh h\u1ecda l\u1eadp tr\u00ecnh khai b\u00e1o v\u1edbi C# Input: D\u00e3y s\u1ed1 nguy\u00ean Output: D\u00e3y s\u1ed1 \u0111\u01b0\u1ee3c s\u1eafp x\u1ebfp t\u0103ng d\u1ea7n */ using System; using System.Collections.Generic; // T\u1ea1o m\u1ed9t danh s\u00e1ch List<int> numbers = new List<int> { 3, 8, 2, 1, 5, 6 }; // G\u1ecdi ph\u01b0\u01a1ng th\u1ee9c s\u1eafp x\u1ebfp (t\u0103ng d\u1ea7n) // Ng\u01b0\u1eddi l\u1eadp tr\u00ecnh kh\u00f4ng c\u1ea7n c\u00e0i \u0111\u1eb7t h\u00e0m Sort() numbers.Sort(); // Print the sorted list Console.WriteLine(\"Day tang dan:\"); Console.WriteLine(\"{0}\", string.Join(\", \", numbers)); Nhi\u1ec1u ng\u00f4n ng\u1eef h\u1ed7 tr\u1ee3 \u0111a m\u00f4 th\u1ee9c (multi-paradigm), nh\u01b0: C++, Java, JavaScript, C#, PHP, Python. M\u1ed9t s\u1ed1 ng\u00f4n ng\u1eef ch\u1ec9 h\u1ed7 tr\u1ee3 m\u1ed9t m\u00f4 th\u1ee9c l\u1eadp tr\u00ecnh (single-paradigm), nh\u01b0 Smalltalk, Haskell.","title":"L\u1eadp tr\u00ecnh h\u01b0\u1edbng th\u1ee7 t\u1ee5c/c\u1ea5u tr\u00fac (procedural/structured programming)"},{"location":"overview/#cach-tiep-can-huong-oi-tuong-object-oriented-approach","text":"C\u00e1ch ti\u1ebfp c\u1eadn h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng k\u1ebft h\u1ee3p d\u1eef li\u1ec7u v\u00e0 x\u1eed l\u00fd c\u00f3 li\u00ean quan v\u1edbi nhau v\u00e0o m\u1ed9t module. Th\u00edch h\u1ee3p cho ph\u00e1t tri\u1ec3n c\u00e1c h\u1ec7 th\u1ed1ng ph\u1ee9c t\u1ea1p v\u00e0 thay \u0111\u1ed5i nhanh ch\u00f3ng do: \u0110\u00e1p \u1ee9ng c\u00e1c thay \u0111\u1ed5i c\u1ee7a h\u1ec7 th\u1ed1ng v\u1edbi chi ph\u00ed th\u1ea5p. Kh\u1ea3 n\u0103ng t\u00e1i s\u1eed d\u1ee5ng cao. T\u00ednh module h\u00f3a cao, gi\u00fap \u0111\u01a1n gi\u1ea3n h\u00f3a vi\u1ec7c ph\u00e1t tri\u1ec3n c\u00e1c h\u1ec7 th\u1ed1ng l\u1edbn t\u1eeb c\u00e1c th\u00e0nh ph\u1ea7n \u0111\u00e3 c\u00f3. C\u00e1c th\u00e0nh ph\u1ea7n c\u1ee7a h\u1ec7 th\u1ed1ng h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng: \u0110\u1ed1i t\u01b0\u1ee3ng (objects). M\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng l\u00e0 m\u1ed9t th\u1ef1c th\u1ec3 \u0111\u01b0\u1ee3c x\u00e1c \u0111\u1ecbnh b\u1edfi c\u00e1c thu\u1ed9c t\u00ednh v\u00e0 h\u00e0nh vi c\u1ee7a n\u00f3. C\u00e1c th\u1ef1c th\u1ec3 h\u1eefu h\u00ecnh (nh\u01b0 sinh vi\u00ean, gi\u1ea3ng vi\u00ean) hay v\u00f4 h\u00ecnh (nh\u01b0 t\u00e0i kho\u1ea3n ng\u00e2n h\u00e0ng) \u0111\u1ec1u c\u00f3 th\u1ec3 m\u00f4 h\u00ecnh h\u00f3a d\u01b0\u1edbi d\u1ea1ng \u0111\u1ed1i t\u01b0\u1ee3ng. Thu\u1ed9c t\u00ednh (attributes): l\u00e0 c\u00e1c tr\u01b0\u1eddng th\u00f4ng tin m\u00f4 t\u1ea3 \u0111\u1ed1i t\u01b0\u1ee3ng. H\u00e0nh vi (behaviour): l\u00e0 c\u00e1ch \u0111\u1ed1i t\u01b0\u1ee3ng \u1ee9ng x\u1eed v\u1edbi m\u00f4i tr\u01b0\u1eddng xung quanh. L\u1edbp (class): l\u00e0 m\u1ed9t nh\u00f3m c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f3 thu\u1ed9c t\u00ednh v\u00e0 h\u00e0nh vi t\u01b0\u01a1ng t\u1ef1 nhau. Ph\u01b0\u01a1ng th\u1ee9c (methods): l\u00e0 h\u00e0nh \u0111\u1ed9ng x\u00e1c \u0111\u1ecbnh h\u00e0nh vi c\u1ee7a m\u1ed9t l\u1edbp \u0111\u1ed1i t\u01b0\u1ee3ng - l\u00e0 nh\u1eefng h\u00e0nh \u0111\u1ed9ng m\u00e0 \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f3 th\u1ec3 l\u00e0m. Th\u00f4ng \u0111i\u1ec7p (message): l\u00e0 m\u1ed9t ph\u01b0\u01a1ng th\u1ee9c t\u00e1c \u0111\u1ed9ng l\u00ean \u0111\u1ed1i t\u01b0\u1ee3ng \u0111\u1ec3 y\u00eau c\u1ea7u th\u1ef1c hi\u1ec7n h\u00e0nh \u0111\u1ed9ng c\u1ee5 th\u1ec3.","title":"C\u00e1ch ti\u1ebfp c\u1eadn h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng (Object Oriented Approach)"},{"location":"overview/#lap-trinh-huong-oi-tuong-object-oriented-programming","text":"L\u00e0 ph\u01b0\u01a1ng ph\u00e1p l\u1eadp tr\u00ecnh d\u1ef1a tr\u00ean c\u00e1ch ti\u1ebfp c\u1eadn h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng. Ch\u01b0\u01a1ng tr\u00ecnh l\u00e0 t\u1eadp h\u1ee3p c\u00e1c \u0111\u1ed1i t\u01b0\u1ee3ng. \u0110\u1ed1i t\u01b0\u1ee3ng th\u1ef1c hi\u1ec7n c\u00e1c y\u00eau c\u1ea7u x\u1eed l\u00fd th\u00f4ng qua c\u01a1 ch\u1ebf truy\u1ec1n th\u00f4ng \u0111i\u1ec7p (message passing). Thu\u1ed9c t\u00ednh: L\u00e0 c\u00e1c th\u00f4ng tin m\u00f4 t\u1ea3 \u0111\u1ed1i t\u01b0\u1ee3ng. V\u1ec1 m\u1eb7t l\u1eadp tr\u00ecnh, vi\u1ec7c khai b\u00e1o c\u00e1c thu\u1ed9c t\u00ednh t\u01b0\u01a1ng t\u1ef1 nh\u01b0 khai b\u00e1o bi\u1ebfn, v\u00ec th\u1ebf ch\u00fang c\u00f2n \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 bi\u1ebfn th\u00e0nh vi\u00ean (member variables). Ph\u01b0\u01a1ng th\u1ee9c: L\u00e0 c\u00e1c h\u00e0nh vi m\u00e0 \u0111\u1ed1i t\u01b0\u1ee3ng c\u00f3 th\u1ec3 th\u1ef1c hi\u1ec7n. Vi\u1ec7c c\u00e0i \u0111\u1eb7t c\u00e1c ph\u01b0\u01a1ng th\u1ee9c t\u01b0\u01a1ng t\u1ef1 nh\u01b0 c\u00e1c h\u00e0m, v\u00ec th\u1ebf ch\u00fang c\u00f2n \u0111\u01b0\u1ee3c g\u1ecdi l\u00e0 h\u00e0m th\u00e0nh vi\u00ean (member functions). V\u00ed d\u1ee5 /* Minh h\u1ecda l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng Input: M\u1ea3ng c\u00e1c s\u1ed1 nguy\u00ean Output: M\u1ea3ng s\u1eafp x\u1ebfp t\u0103ng d\u1ea7n */ using System; // Khai b\u00e1o l\u1edbp Array ch\u1ee9a m\u1ea3ng s\u1ed1 nguy\u00ean v\u00e0 c\u00e1c x\u1eed l\u00fd tr\u00ean m\u1ea3ng public class Array{ private int[] numbers; // D\u1eef li\u1ec7u/bi\u1ebfn th\u00e0nh vi\u00ean // Ph\u01b0\u01a1ng th\u1ee9c (h\u00e0m) thi\u1ebft l\u1eadp (constructor) // T\u1ea1o m\u1ed9t d\u00e3y n ph\u1ea7n t\u1eed c\u00f3 gi\u00e1 tr\u1ecb ng\u1eabu nhi\u00ean trong \u0111o\u1ea1n [Min, Max] public Array(int n, int min=0, int max=50) { numbers = new int[n]; Random randNum = new Random(); for(int i=0; i < numbers.Length; i++) numbers[i] = randNum.Next(min, max); } // Ph\u01b0\u01a1ng th\u1ee9c/H\u00e0m th\u00e0nh vi\u00ean public void Print() { Console.WriteLine(\"{0}\", string.Join(\", \", numbers)); } // S\u1eafp x\u1ebfp t\u0103ng d\u1ea7n public void Sort() { for(int i=0; i < numbers.Length - 1; i++) for(int j=i+1; j < numbers.Length; j++) if(numbers[i] > numbers[j]) { int t = numbers[i]; numbers[i] = numbers[j]; numbers[j] = t; } } } // Ch\u01b0\u01a1ng tr\u00ecnh ch\u00ednh class Program { static void Main(string[] args) { // G\u1ecdi ph\u01b0\u01a1ng th\u1ee9c thi\u1ebft l\u1eadp (constructor) // t\u1ea1o m\u1ea3ng ng\u1eabu nhi\u00ean c\u00e1c s\u1ed1 nguy\u00ean trong kho\u1ea3ng [0, 30] Array myNumbers = new Array(6, 0, 30); // In m\u1ea3ng - g\u1ecdi ph\u01b0\u01a1ng th\u1ee9c Print() Console.WriteLine(\"Random numbers:\"); myNumbers.Print(); // S\u1eafp x\u1ebfp t\u0103ng d\u1ea7n - g\u1ecdi ph\u01b0\u01a1ng th\u1ee9c Sort() myNumbers.Sort(); // In m\u1ea3ng sau s\u1eafp x\u1ebfp - g\u1ecdi ph\u01b0\u01a1ng th\u1ee9c Print() Console.WriteLine(\"The numbers in ascending order:\"); myNumbers.Print(); } }","title":"L\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng (Object Oriented Programming)"},{"location":"overview/#so-sanh-lap-trinh-huong-oi-tuong-va-lap-trinh-cau-truc","text":"","title":"So s\u00e1nh l\u1eadp tr\u00ecnh h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng v\u00e0 l\u1eadp tr\u00ecnh c\u1ea5u tr\u00fac"},{"location":"overview/#bai-toan-minh-hoa","text":"\u0110\u1ec3 so s\u00e1nh c\u00e1c c\u00e1ch ti\u1ebfp c\u1eadn l\u1eadp tr\u00ecnh, ta x\u00e9t b\u00e0i to\u00e1n - \u0111\u00e3 \u0111\u01a1n gi\u1ea3n h\u00f3a - sau \u0111\u00e2y: M\u1ed9t tr\u01b0\u1eddng h\u1ecdc c\u1ea7n x\u00e2y d\u1ef1ng ph\u1ea7n m\u1ec1m qu\u1ea3n l\u00fd \u0111\u00e0o t\u1ea1o. H\u1ec7 th\u1ed1ng n\u00e0y qu\u1ea3n l\u00fd d\u1eef li\u1ec7u c\u1ee7a sinh vi\u00ean (Students), gi\u1ea3ng vi\u00ean (Lecturers), c\u00e1c m\u00f4n h\u1ecdc (Courses), v\u00e0 c\u00e1c k\u1ef3 thi (Exams). Ph\u1ea7n m\u1ec1m c\u1ea7n c\u00f3 c\u00e1c ch\u1ee9c n\u0103ng: th\u00eam sinh vi\u00ean (AddStudent), x\u00f3a sinh vi\u00ean (RemoveStudent), d\u1ef1 thi (TakeExams), xem \u0111i\u1ec3m (ViewGrades). Sau khi ph\u00e2n t\u00edch, m\u00f4 h\u00ecnh h\u1ec7 th\u1ed1ng qu\u1ea3n l\u00fd \u0111\u00e0o t\u1ea1o \u0111\u01b0\u1ee3c thi\u1ebft k\u1ebf theo s\u01a1 \u0111\u1ed3 sau: H\u1ec7 th\u1ed1ng qu\u1ea3n l\u00fd g\u1ed3m c\u00f3 d\u1eef li\u1ec7u (data) v\u00e0 c\u00e1c ch\u1ee9c n\u0103ng (functions) thao t\u00e1c tr\u00ean d\u1eef li\u1ec7u. Trong \u0111\u00f3, \u0111\u01b0\u1eddng n\u00e9t \u0111\u1ee9t th\u1ec3 hi\u1ec7n s\u1ef1 ph\u1ee5 thu\u1ed9c c\u1ee7a m\u1ed9t t\u1eadp d\u1eef li\u1ec7u v\u00e0o m\u1ed9t t\u1eadp d\u1eef li\u1ec7u kh\u00e1c; ch\u1eb3ng h\u1ea1n, m\u1ed7i sinh vi\u00ean h\u1ecdc nhi\u1ec1u m\u00f4n h\u1ecdc, m\u1ed7i m\u00f4n h\u1ecdc l\u1ea1i c\u00f3 nhi\u1ec1u sinh vi\u00ean. \u0110\u01b0\u1eddng m\u0169i t\u00ean th\u1ec3 hi\u1ec7n s\u1ef1 t\u00e1c \u0111\u1ed9ng c\u1ee7a c\u00e1c ch\u1ee9c n\u0103ng l\u00ean m\u1ed9t ho\u1eb7c m\u1ed9t s\u1ed1 t\u1eadp d\u1eef li\u1ec7u; v\u00ed d\u1ee5, ch\u1ee9c n\u0103ng th\u00eam sinh vi\u00ean (AddStudent) s\u1ebd thay \u0111\u1ed5i n\u1ed9i dung c\u1ee7a t\u1eadp d\u1eef li\u1ec7u sinh vi\u00ean (Students), c\u00f2n ch\u1ee9c n\u0103ng d\u1ef1 thi (TakeExams) c\u1ea7n truy c\u1eadp d\u1eef li\u1ec7u c\u1ee7a c\u1ea3 sinh vi\u00ean v\u00e0 k\u1ef3 thi (Exams). Theo c\u00e1ch ti\u1ebfp c\u1eadn l\u1eadp tr\u00ecnh h\u01b0\u1edbng th\u1ee7 t\u1ee5c/c\u1ea5u tr\u00fac , m\u1ed7i ch\u1ee9c n\u0103ng \u0111\u01b0\u1ee3c t\u1ed5 ch\u1ee9c th\u00e0nh m\u1ed9t ch\u01b0\u01a1ng tr\u00ecnh con (h\u00e0m) t\u01b0\u01a1ng \u1ee9ng. C\u00e1c h\u00e0m th\u1ef1c hi\u1ec7n x\u1eed l\u00fd d\u1eef li\u1ec7u th\u00f4ng qua truy\u1ec1n tham s\u1ed1 v\u00e0 tr\u1ea3 v\u1ec1 k\u1ebft qu\u1ea3 cho l\u1eddi g\u1ecdi h\u00e0m. X\u00e9t v\u00e0i t\u00ecnh hu\u1ed1ng sau: - T\u00ecnh hu\u1ed1ng 1 : Gi\u1ea3 s\u1eed d\u1eef li\u1ec7u \u0111ang l\u01b0u tr\u1eef n\u0103m sinh l\u00e0 s\u1ed1 c\u00f3 2 ch\u1eef s\u1ed1, nay c\u1ea7n chuy\u1ec3n \u0111\u1ed5i th\u00e0nh s\u1ed1 c\u00f3 4 ch\u1eef s\u1ed1 (v\u00ed d\u1ee5: 97 -> 1997). Gi\u1ea3i ph\u00e1p hi\u1ec3n nhi\u00ean l\u00e0 c\u1ea7n thay \u0111\u1ed5i tr\u01b0\u1eddng d\u1eef li\u1ec7u ng\u00e0y sinh c\u1ee7a sinh vi\u00ean v\u00e0 gi\u1ea3ng vi\u00ean th\u00e0nh s\u1ed1 c\u00f3 4 ch\u1eef s\u1ed1. Khi \u0111\u00f3, t\u1ea5t c\u1ea3 c\u00e1c h\u00e0m c\u00f3 t\u00e1c \u0111\u1ed9ng l\u00ean sinh vi\u00ean v\u00e0 gi\u1ea3ng vi\u00ean s\u1ebd kh\u00f4ng ho\u1ea1t \u0111\u1ed9ng \u0111\u01b0\u1ee3c, tr\u1eeb khi ph\u1ea3i ch\u1ec9nh s\u1eeda l\u1ea1i m\u00e3 ngu\u1ed3n. B\u00ean c\u1ea1nh \u0111\u00f3, t\u1eadp d\u1eef li\u1ec7u sinh vi\u00ean c\u00f3 m\u1ed1i quan h\u1ec7 ph\u1ee5 thu\u1ed9c v\u1edbi c\u00e1c t\u1eadp d\u1eef li\u1ec7u kh\u00e1c, v\u00ec th\u1ebf vi\u1ec7c thay \u0111\u1ed5i n\u00e0y c\u00f3 th\u1ec3 g\u00e2y ra l\u1ed7i cho h\u1ec7 th\u1ed1ng. T\u00ecnh hu\u1ed1ng 2 : H\u1ec7 th\u1ed1ng c\u1ea7n qu\u1ea3n l\u00fd th\u00eam m\u1ed9t th\u00e0nh ph\u1ea7n d\u1eef li\u1ec7u m\u1edbi l\u00e0 sinh vi\u00ean h\u1ec7 v\u1eeba l\u00e0m v\u1eeba h\u1ecdc. V\u1edbi ph\u01b0\u01a1ng ph\u00e1p l\u1eadp tr\u00ecnh c\u1ea5u tr\u00fac, c\u1ea7n thi\u1ebft k\u1ebf l\u1ea1i m\u00f4 h\u00ecnh d\u1eef li\u1ec7u \u0111\u1ec3 b\u1ed5 sung t\u1eadp d\u1eef li\u1ec7u sinh vi\u00ean v\u1eeba l\u00e0m v\u1eeba h\u1ecdc, sau \u0111\u00f3 vi\u1ebft c\u00e1c h\u00e0m x\u1eed l\u00fd t\u01b0\u01a1ng \u1ee9ng v\u1edbi m\u1ed7i ch\u1ee9c n\u0103ng c\u1ea7n c\u00f3 v\u1edbi t\u1eadp d\u1eef li\u1ec7u m\u1edbi n\u00e0y. C\u00e1c t\u00ecnh hu\u1ed1ng tr\u00ean cho th\u1ea5y nh\u01b0\u1ee3c \u0111i\u1ec3m c\u1ee7a ph\u01b0\u01a1ng ph\u00e1p l\u1eadp tr\u00ecnh c\u1ea5u tr\u00fac khi gi\u1ea3i quy\u1ebft nh\u1eefng b\u00e0i to\u00e1n ph\u1ee9c t\u1ea1p. Khi \u0111\u00f3, vi\u1ec7c n\u00e2ng c\u1ea5p hay m\u1edf r\u1ed9ng tr\u1edf n\u00ean kh\u00f3 kh\u0103n. \u0110\u1ed3ng th\u1eddi, kh\u1ea3 n\u0103ng t\u00e1i s\u1eed d\u1ee5ng m\u00e3 ngu\u1ed3n v\u00e0 s\u1ef1 che ch\u1eafn d\u1eef li\u1ec7u c\u0169ng h\u1ea1n ch\u1ebf. V\u1edbi c\u00e1ch ti\u1ebfp c\u1eadn h\u01b0\u1edbng \u0111\u1ed1i t\u01b0\u1ee3ng , c\u00e1c ch\u1ee9c n\u0103ng th\u00eam sinh vi\u00ean (AddStudent), x\u00f3a sinh vi\u00ean (RemoveStudent) s\u1ebd \u0111\u01b0\u1ee3c \u0111\u00f3ng g\u00f3i c\u00f9ng v\u1edbi d\u1eef li\u1ec7u sinh vi\u00ean (Students) trong m\u1ed9t module. V\u1edbi m\u1ed7i sinh vi\u00ean, l\u1edbp Student s\u1ebd t\u1ea1o ra m\u1ed9t th\u1ef1c th\u1ec3 t\u01b0\u01a1ng \u1ee9ng \u0111\u1ec3 l\u01b0u tr\u1eef, qu\u1ea3n l\u00fd d\u1eef li\u1ec7u v\u00e0 c\u00e1c x\u1eed l\u00fd li\u00ean quan. T\u01b0\u01a1ng t\u1ef1 nh\u01b0 v\u1eady v\u1edbi c\u00e1c ch\u1ee9c n\u0103ng v\u00e0 t\u1eadp d\u1eef li\u1ec7u kh\u00e1c. \u0110\u1ec3 y\u00eau c\u1ea7u m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng th\u1ef1c hi\u1ec7n m\u1ed9t h\u00e0nh \u0111\u1ed9ng n\u00e0o \u0111\u00f3, c\u1ea7n truy\u1ec1n th\u00f4ng \u0111i\u1ec7p cho n\u00f3 (ch\u00ednh l\u00e0 g\u1ecdi h\u00e0m t\u00e1c \u0111\u1ed9ng l\u00ean \u0111\u1ed1i t\u01b0\u1ee3ng). Ch\u1eb3ng h\u1ea1n, khi m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng sinh vi\u00ean g\u1ecdi ch\u1ee9c n\u0103ng \"Add()\", ch\u01b0\u01a1ng tr\u00ecnh s\u1ebd t\u1ea1o m\u1edbi m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng sinh vi\u00ean, sau \u0111\u00f3 ch\u1ee9c n\u0103ng \"AddAttendee()\" s\u1ebd \u0111\u01b0\u1ee3c g\u1ecdi t\u1eeb m\u1ed9t \u0111\u1ed1i t\u01b0\u1ee3ng c\u1ee7a l\u1edbp m\u00f4n h\u1ecdc (Course).","title":"B\u00e0i to\u00e1n minh h\u1ecda"},{"location":"overview/#tai-lieu-tham-khao","text":"","title":"T\u00e0i li\u1ec7u tham kh\u1ea3o"},{"location":"overview/#lectures-on-high-performance-computing-for-economists-university-of-pennsylvania-2020","text":"","title":"Lectures on High-performance Computing for Economists, University of Pennsylvania, 2020"},{"location":"overview/#programming-languages-stanford-university-2018","text":"","title":"Programming Languages, Stanford University, 2018"},{"location":"overview/#object-oriented-analysis-and-design-using-the-uml-university-of-calgary-2000","text":"","title":"Object Oriented Analysis and Design using the UML, University of Calgary, 2000"}]}